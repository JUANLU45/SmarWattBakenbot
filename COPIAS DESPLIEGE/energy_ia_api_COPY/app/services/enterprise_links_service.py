"""
üè¢ ENTERPRISE LINKS SERVICE
Servicio empresarial para gesti√≥n inteligente de enlaces de Smarwatt
Detecta autom√°ticamente contexto en respuestas y a√±ade enlaces relevantes
"""

import re
import logging
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class SmarwattLink:
    """Modelo de datos para enlaces de Smarwatt"""

    url: str
    title: str
    keywords: List[str]
    context_phrases: List[str]
    priority: int  # 1-10, mayor prioridad = m√°s relevante


class EnterpriseLinkService:
    """
    üè¢ Servicio empresarial para gesti√≥n inteligente de enlaces

    Funcionalidades:
    - Detecci√≥n autom√°tica de contexto en respuestas
    - Inserci√≥n inteligente de enlaces relevantes
    - An√°lisis sem√°ntico de contenido
    - Priorizaci√≥n de enlaces seg√∫n relevancia
    """

    def __init__(self):
        """Inicializa el servicio con configuraci√≥n empresarial"""
        self.smarwatt_links = self._initialize_enterprise_links()
        logger.info("üè¢ Enterprise Link Service inicializado correctamente")

    def _initialize_enterprise_links(self) -> Dict[str, SmarwattLink]:
        """Inicializa enlaces empresariales con detecci√≥n inteligente"""
        return {
            "blog": SmarwattLink(
                url="https://smarwatt.com/blog",
                title="Blog de Smarwatt",
                keywords=[
                    "blog",
                    "art√≠culo",
                    "noticia",
                    "informaci√≥n",
                    "consejo",
                    "gu√≠a",
                    "actualidad",
                    "tendencia",
                    "aprende",
                    "descubre",
                ],
                context_phrases=[
                    "puedes leer m√°s",
                    "m√°s informaci√≥n",
                    "art√≠culos relacionados",
                    "en nuestro blog",
                    "contenido adicional",
                    "gu√≠as detalladas",
                    "consejos √∫tiles",
                    "√∫ltimas noticias",
                ],
                priority=8,
            ),
            "dashboard": SmarwattLink(
                url="https://smarwatt.com/dashboard",
                title="Dashboard de Smarwatt",
                keywords=[
                    "dashboard",
                    "panel",
                    "control",
                    "gesti√≥n",
                    "monitoreo",
                    "seguimiento",
                    "estad√≠sticas",
                    "m√©tricas",
                    "an√°lisis",
                ],
                context_phrases=[
                    "en tu dashboard",
                    "panel de control",
                    "√°rea personal",
                    "gestionar tu cuenta",
                    "ver estad√≠sticas",
                    "monitorear consumo",
                ],
                priority=9,
            ),
            "calculator": SmarwattLink(
                url="https://smarwatt.com/calculator",
                title="El Ladr√≥n de tu Factura - Calculadora de Consumo El√©ctrico",
                keywords=[
                    "calculadora",
                    "calcular",
                    "consumo",
                    "el√©ctrico",
                    "electrodom√©sticos",
                    "aparatos",
                    "ladr√≥n",
                    "factura",
                    "coste",
                    "gasto",
                    "ahorro",
                    "kwh",
                    "potencia",
                    "watts",
                ],
                context_phrases=[
                    "calcula el consumo",
                    "qu√© aparato consume m√°s",
                    "coste de electrodom√©sticos",
                    "el ladr√≥n de tu factura",
                    "calculadora de consumo",
                    "gasto de aparatos",
                    "cu√°nto consume mi nevera",
                    "aparatos que m√°s gastan",
                ],
                priority=10,
            ),
            "contact": SmarwattLink(
                url="https://smarwatt.com/contact",
                title="Contacto - Smarwatt",
                keywords=[
                    "contacto",
                    "contactar",
                    "ayuda",
                    "soporte",
                    "consulta",
                    "pregunta",
                    "asistencia",
                    "comunicar",
                    "escribir",
                    "llamar",
                ],
                context_phrases=[
                    "ponte en contacto",
                    "necesitas ayuda",
                    "m√°s informaci√≥n",
                    "atenci√≥n al cliente",
                    "servicio t√©cnico",
                    "consulta personalizada",
                    "hablar con nosotros",
                    "resolver dudas",
                ],
                priority=9,
            ),
            "terms": SmarwattLink(
                url="https://smarwatt.com/terms",
                title="T√©rminos y Condiciones - Smarwatt",
                keywords=[
                    "t√©rminos",
                    "condiciones",
                    "legal",
                    "contrato",
                    "acuerdo",
                    "pol√≠tica",
                    "uso",
                    "servicio",
                    "normativa",
                ],
                context_phrases=[
                    "t√©rminos y condiciones",
                    "pol√≠tica de uso",
                    "acuerdo de servicio",
                    "normativa legal",
                    "condiciones del servicio",
                ],
                priority=5,
            ),
            "privacy": SmarwattLink(
                url="https://smarwatt.com/privacy",
                title="Pol√≠tica de Privacidad - Smarwatt",
                keywords=[
                    "privacidad",
                    "datos",
                    "protecci√≥n",
                    "gdpr",
                    "informaci√≥n",
                    "personal",
                    "tratamiento",
                    "cookies",
                    "confidencial",
                ],
                context_phrases=[
                    "pol√≠tica de privacidad",
                    "protecci√≥n de datos",
                    "tratamiento de informaci√≥n",
                    "gesti√≥n de datos personales",
                    "privacidad y seguridad",
                ],
                priority=6,
            ),
        }

    def analyze_and_enhance_response(
        self,
        response_text: str,
        user_message: str = "",
        weather_data: Optional[Dict[str, Any]] = None,
    ) -> str:
        """
        Analiza respuesta y a√±ade enlaces SOLO cuando el usuario los pide espec√≠ficamente
        o en contextos MUY espec√≠ficos

        Args:
            response_text: Texto de respuesta del chatbot
            user_message: Mensaje original del usuario
            weather_data: Datos meteorol√≥gicos reales de OpenWeatherMap (opcional)

        Returns:
            str: Respuesta con enlaces HTML con iconos solo si es expl√≠citamente solicitado
        """
        try:
            if not response_text or len(response_text.strip()) < 10:
                return response_text

            # Solo a√±adir enlaces cuando el usuario los pida EXPL√çCITAMENTE
            enhanced_response = self._add_contextual_links_if_requested(
                response_text, user_message, weather_data
            )

            return enhanced_response

        except Exception as e:
            logger.error(f"‚ùå Error analizando respuesta para enlaces: {str(e)}")
            return response_text

    def _add_contextual_links_if_requested(
        self,
        response_text: str,
        user_message: str,
        weather_data: Optional[Dict[str, Any]] = None,
    ) -> str:
        """
        A√±ade enlaces √öNICAMENTE cuando:
        1. El usuario pide expl√≠citamente un enlace
        2. En contextos muy espec√≠ficos como recomendar art√≠culos sobre placas solares
        """
        try:
            user_lower = user_message.lower()
            response_lower = response_text.lower()

            # Si ya hay enlaces, no procesar m√°s
            if "smarwatt.com" in response_text:
                return response_text

            enhanced_response = response_text

            # 1. ENLACES EXPL√çCITOS - Usuario pide directamente
            if any(
                phrase in user_lower
                for phrase in [
                    "enlace al blog",
                    "enlace del blog",
                    "link del blog",
                    "p√°gina del blog",
                    "enlace de contacto",
                    "enlace del contacto",
                    "p√°gina de contacto",
                    "enlace a la calculadora",
                    "enlace del calculadora",
                    "p√°gina calculadora",
                ]
            ):
                enhanced_response = self._add_requested_link(
                    enhanced_response, user_lower
                )

            # 2. CONTEXTOS ESPEC√çFICOS - Solo para recomendaciones espec√≠ficas
            elif any(
                phrase in response_lower
                for phrase in [
                    "te recomiendo leer",
                    "puedes consultar nuestro art√≠culo",
                    "tenemos informaci√≥n detallada",
                    "encontrar√°s m√°s detalles",
                ]
            ) and any(
                topic in user_lower
                for topic in [
                    "placas solares",
                    "paneles solares",
                    "energ√≠a solar",
                    "instalaci√≥n solar",
                ]
            ):
                # Solo para art√≠culos sobre energ√≠a solar
                enhanced_response = self._add_blog_recommendation(enhanced_response)

            # 3. CONTEXTOS ESPEC√çFICOS - Calculadora de consumo el√©ctrico
            elif any(
                phrase in user_lower
                for phrase in [
                    "cu√°nto consume",
                    "cu√°nto gasta",
                    "consumo de",
                    "gasto de",
                    "aparato que m√°s consume",
                    "electrodom√©stico que m√°s gasta",
                    "calcular consumo",
                    "calcular gasto",
                ]
            ) and any(
                response_phrase in response_lower
                for response_phrase in [
                    "puedes usar nuestra calculadora",
                    "te recomiendo usar la calculadora",
                    "con nuestra herramienta",
                    "para un c√°lculo exacto",
                ]
            ):
                # Solo para consultas sobre consumo de aparatos
                enhanced_response = self._add_consumption_calculator_recommendation(
                    enhanced_response
                )

            # 4. CONTEXTOS ESPEC√çFICOS - Informaci√≥n meteorol√≥gica y clima
            elif (
                any(
                    phrase in user_lower
                    for phrase in [
                        "tiempo",
                        "clima",
                        "temperatura",
                        "lluvia",
                        "calor",
                        "fr√≠o",
                        "meteorolog√≠a",
                        "pron√≥stico",
                    ]
                )
                and weather_data
            ):
                # Detectar ubicaci√≥n espec√≠fica en mensaje del usuario
                user_location = self._detect_location_in_message(user_message)
                if user_location:
                    # Actualizar datos meteorol√≥gicos con ubicaci√≥n detectada
                    enhanced_weather_data = weather_data.copy()
                    enhanced_weather_data["location"] = user_location
                    enhanced_response = self._add_weather_context_enhancement(
                        enhanced_response, enhanced_weather_data
                    )
                else:
                    # Solo cuando hay datos meteorol√≥gicos reales disponibles
                    enhanced_response = self._add_weather_context_enhancement(
                        enhanced_response, weather_data
                    )

            return enhanced_response

        except Exception as e:
            logger.error(f"‚ùå Error a√±adiendo enlaces contextuales: {str(e)}")
            return response_text

    def _add_requested_link(self, response_text: str, user_request: str) -> str:
        """A√±ade el enlace espec√≠fico que el usuario pidi√≥ con icono y 'pinche aqu√≠'"""
        try:
            if "blog" in user_request:
                link_html = """<br><br><a href="https://smarwatt.com/blog" target="_blank" style="color: #2563eb; text-decoration: none; font-weight: bold;">
üìù Blog de Smarwatt - <span style="text-decoration: underline;">pinche aqu√≠</span>
</a>"""
                return response_text + link_html

            elif "contact" in user_request or "contacto" in user_request:
                link_html = """<br><br><a href="https://smarwatt.com/contact" target="_blank" style="color: #2563eb; text-decoration: none; font-weight: bold;">
üìû Contacto - <span style="text-decoration: underline;">pinche aqu√≠</span>
</a>"""
                return response_text + link_html

            elif "calculadora" in user_request or "calculator" in user_request:
                link_html = """<br><br><a href="https://smarwatt.com/calculator" target="_blank" style="color: #2563eb; text-decoration: none; font-weight: bold;">
üßÆ El Ladr√≥n de tu Factura - <span style="text-decoration: underline;">pinche aqu√≠</span>
</a>"""
                return response_text + link_html

            return response_text

        except Exception as e:
            logger.error(f"‚ùå Error a√±adiendo enlace solicitado: {str(e)}")
            return response_text

    def _add_blog_recommendation(self, response_text: str) -> str:
        """A√±ade enlace al blog solo cuando se recomienda un art√≠culo espec√≠fico"""
        try:
            link_html = """<br><br><a href="https://smarwatt.com/blog" target="_blank" style="color: #2563eb; text-decoration: none; font-weight: bold;">
üìù Ver art√≠culo completo - <span style="text-decoration: underline;">pinche aqu√≠</span>
</a>"""
            return response_text + link_html

        except Exception as e:
            logger.error(f"‚ùå Error a√±adiendo recomendaci√≥n de blog: {str(e)}")
            return response_text

    def _add_consumption_calculator_recommendation(self, response_text: str) -> str:
        """A√±ade enlace a la calculadora de consumo solo cuando se habla de consumo de aparatos"""
        try:
            link_html = """<br><br><a href="https://smarwatt.com/calculator" target="_blank" style="color: #2563eb; text-decoration: none; font-weight: bold;">
üßÆ Usar El Ladr√≥n de tu Factura - <span style="text-decoration: underline;">pinche aqu√≠</span>
</a>"""
            return response_text + link_html

        except Exception as e:
            logger.error(f"‚ùå Error a√±adiendo recomendaci√≥n de calculadora: {str(e)}")
            return response_text

    def _add_weather_context_enhancement(
        self, response_text: str, weather_data: Dict[str, Any]
    ) -> str:
        """
        A√±ade informaci√≥n meteorol√≥gica real contextualizada para energ√≠a
        Usa datos reales de OpenWeatherMap API disponibles en el sistema
        """
        try:
            if not weather_data:
                return response_text

            # Extraer datos meteorol√≥gicos verificados del sistema
            temp = weather_data.get("temp", weather_data.get("temperature"))
            humidity = weather_data.get("humidity")
            description = weather_data.get(
                "description", weather_data.get("weather_description")
            )
            location = weather_data.get("location", "Madrid,ES")

            # Obtener informaci√≥n geogr√°fica espec√≠fica
            city_info = self._extract_geographic_context(location)

            # Construir informaci√≥n meteorol√≥gica contextualizada para energ√≠a
            weather_info = []

            if temp is not None:
                # Contextualizar temperatura para consumo energ√©tico con ubicaci√≥n espec√≠fica
                temp_celsius = float(temp)
                if temp_celsius < 15:
                    impact = f"con el fr√≠o {city_info['adjective']}, calefacci√≥n puede aumentar el consumo 40-60%"
                elif temp_celsius > 25:
                    impact = f"con el calor {city_info['adjective']}, aire acondicionado puede aumentar el consumo 30-50%"
                else:
                    impact = f"temperatura ideal en {city_info['name']} para ahorro energ√©tico"

                weather_info.append(
                    f"üå°Ô∏è **{city_info['name']}: {temp_celsius:.1f}¬∞C** - {impact}"
                )

            if humidity is not None:
                # Contextualizar humedad para consumo energ√©tico con ubicaci√≥n espec√≠fica
                humidity_percent = float(humidity)
                if humidity_percent > 70:
                    humidity_impact = f"la alta humedad {city_info['adjective']} puede requerir deshumidificador"
                elif humidity_percent < 30:
                    humidity_impact = f"la baja humedad {city_info['adjective']} puede requerir humidificador"
                else:
                    humidity_impact = f"humedad √≥ptima en {city_info['name']}"

                weather_info.append(
                    f"üíß **{city_info['name']}: {humidity_percent}%** - {humidity_impact}"
                )

            if description:
                # Contextualizar condiciones clim√°ticas para energ√≠a con ubicaci√≥n espec√≠fica
                desc_lower = str(description).lower()
                if any(word in desc_lower for word in ["lluvia", "nublado", "oscuro"]):
                    lighting_impact = f"con el cielo {city_info['adjective']}, mayor uso de iluminaci√≥n recomendado"
                elif any(word in desc_lower for word in ["sol", "despejado", "claro"]):
                    lighting_impact = f"aprovecha el sol de {city_info['name']} para ahorrar en iluminaci√≥n"
                else:
                    lighting_impact = f"condiciones normales en {city_info['name']}"

                weather_info.append(
                    f"‚òÄÔ∏è **{city_info['name']}: {description}** - {lighting_impact}"
                )

            if weather_info:
                weather_enhancement = f"""<br><br>üå§Ô∏è **Informaci√≥n meteorol√≥gica para optimizar tu consumo energ√©tico:**<br>
{chr(10).join(weather_info)}"""
                return response_text + weather_enhancement

            return response_text

        except Exception as e:
            logger.error(f"‚ùå Error a√±adiendo contexto meteorol√≥gico: {str(e)}")
            return response_text

    def _extract_geographic_context(self, location: str) -> Dict[str, str]:
        """
        Extrae contexto geogr√°fico real desde ubicaci√≥n o c√≥digo postal
        Maneja ciudades, pueblos y c√≥digos postales espa√±oles reales
        """
        try:
            if not location:
                return {"name": "Madrid", "adjective": "madrile√±o", "region": "Madrid"}

            location_clean = location.upper().replace(",ES", "").strip()

            # Mapeo REAL de c√≥digos postales espa√±oles por rangos (datos oficiales)
            postal_ranges = {
                # Madrid (28xxx)
                range(28000, 28999): {
                    "name": "Madrid",
                    "adjective": "madrile√±o",
                    "region": "Madrid",
                },
                # Barcelona (08xxx)
                range(8000, 8999): {
                    "name": "Barcelona",
                    "adjective": "barcelon√©s",
                    "region": "Catalu√±a",
                },
                # Valencia (46xxx)
                range(46000, 46999): {
                    "name": "Valencia",
                    "adjective": "valenciano",
                    "region": "Valencia",
                },
                # Sevilla (41xxx)
                range(41000, 41999): {
                    "name": "Sevilla",
                    "adjective": "sevillano",
                    "region": "Andaluc√≠a",
                },
                # Zaragoza (50xxx)
                range(50000, 50999): {
                    "name": "Zaragoza",
                    "adjective": "zaragozano",
                    "region": "Arag√≥n",
                },
                # M√°laga (29xxx)
                range(29000, 29999): {
                    "name": "M√°laga",
                    "adjective": "malague√±o",
                    "region": "Andaluc√≠a",
                },
                # Murcia (30xxx)
                range(30000, 30999): {
                    "name": "Murcia",
                    "adjective": "murciano",
                    "region": "Murcia",
                },
                # Palma (07xxx)
                range(7000, 7999): {
                    "name": "Palma",
                    "adjective": "palmesano",
                    "region": "Baleares",
                },
                # Las Palmas (35xxx)
                range(35000, 35999): {
                    "name": "Las Palmas",
                    "adjective": "palmense",
                    "region": "Canarias",
                },
                # Bilbao (48xxx)
                range(48000, 48999): {
                    "name": "Bilbao",
                    "adjective": "bilba√≠no",
                    "region": "Pa√≠s Vasco",
                },
                # Alicante (03xxx)
                range(3000, 3999): {
                    "name": "Alicante",
                    "adjective": "alicantino",
                    "region": "Valencia",
                },
                # C√≥rdoba (14xxx)
                range(14000, 14999): {
                    "name": "C√≥rdoba",
                    "adjective": "cordob√©s",
                    "region": "Andaluc√≠a",
                },
                # Valladolid (47xxx)
                range(47000, 47999): {
                    "name": "Valladolid",
                    "adjective": "vallisoletano",
                    "region": "Castilla y Le√≥n",
                },
                # Vigo (36xxx)
                range(36000, 36999): {
                    "name": "Vigo",
                    "adjective": "vigu√©s",
                    "region": "Galicia",
                },
                # Gij√≥n (33xxx)
                range(33000, 33999): {
                    "name": "Gij√≥n",
                    "adjective": "gijon√©s",
                    "region": "Asturias",
                },
                # Granada (18xxx)
                range(18000, 18999): {
                    "name": "Granada",
                    "adjective": "granadino",
                    "region": "Andaluc√≠a",
                },
                # Vitoria (01xxx)
                range(1000, 1999): {
                    "name": "Vitoria",
                    "adjective": "vitoriano",
                    "region": "Pa√≠s Vasco",
                },
                # A Coru√±a (15xxx)
                range(15000, 15999): {
                    "name": "A Coru√±a",
                    "adjective": "coru√±√©s",
                    "region": "Galicia",
                },
                # Elche (03xxx - espec√≠fico)
                range(3200, 3299): {
                    "name": "Elche",
                    "adjective": "ilicitano",
                    "region": "Valencia",
                },
                # Oviedo (33xxx - espec√≠fico)
                range(33000, 33099): {
                    "name": "Oviedo",
                    "adjective": "ovetense",
                    "region": "Asturias",
                },
                # Santa Cruz (38xxx)
                range(38000, 38999): {
                    "name": "Santa Cruz de Tenerife",
                    "adjective": "chicharrero",
                    "region": "Canarias",
                },
                # Pamplona (31xxx)
                range(31000, 31999): {
                    "name": "Pamplona",
                    "adjective": "pamplon√©s",
                    "region": "Navarra",
                },
                # Almer√≠a (04xxx)
                range(4000, 4999): {
                    "name": "Almer√≠a",
                    "adjective": "almeriense",
                    "region": "Andaluc√≠a",
                },
                # San Sebasti√°n (20xxx)
                range(20000, 20999): {
                    "name": "San Sebasti√°n",
                    "adjective": "donostiarra",
                    "region": "Pa√≠s Vasco",
                },
                # Santander (39xxx)
                range(39000, 39999): {
                    "name": "Santander",
                    "adjective": "santanderino",
                    "region": "Cantabria",
                },
                # Le√≥n (24xxx)
                range(24000, 24999): {
                    "name": "Le√≥n",
                    "adjective": "leon√©s",
                    "region": "Castilla y Le√≥n",
                },
                # Burgos (09xxx)
                range(9000, 9999): {
                    "name": "Burgos",
                    "adjective": "burgal√©s",
                    "region": "Castilla y Le√≥n",
                },
                # Salamanca (37xxx)
                range(37000, 37999): {
                    "name": "Salamanca",
                    "adjective": "salmantino",
                    "region": "Castilla y Le√≥n",
                },
                # C√°ceres (10xxx)
                range(10000, 10999): {
                    "name": "C√°ceres",
                    "adjective": "cacere√±o",
                    "region": "Extremadura",
                },
                # Badajoz (06xxx)
                range(6000, 6999): {
                    "name": "Badajoz",
                    "adjective": "pacense",
                    "region": "Extremadura",
                },
                # Toledo (45xxx)
                range(45000, 45999): {
                    "name": "Toledo",
                    "adjective": "toledano",
                    "region": "Castilla-La Mancha",
                },
                # Ciudad Real (13xxx)
                range(13000, 13999): {
                    "name": "Ciudad Real",
                    "adjective": "ciudadreale√±o",
                    "region": "Castilla-La Mancha",
                },
                # Albacete (02xxx)
                range(2000, 2999): {
                    "name": "Albacete",
                    "adjective": "albacete√±o",
                    "region": "Castilla-La Mancha",
                },
                # Cuenca (16xxx)
                range(16000, 16999): {
                    "name": "Cuenca",
                    "adjective": "conquense",
                    "region": "Castilla-La Mancha",
                },
                # Guadalajara (19xxx)
                range(19000, 19999): {
                    "name": "Guadalajara",
                    "adjective": "guadalajare√±o",
                    "region": "Castilla-La Mancha",
                },
                # √Åvila (05xxx)
                range(5000, 5999): {
                    "name": "√Åvila",
                    "adjective": "abulense",
                    "region": "Castilla y Le√≥n",
                },
                # Segovia (40xxx)
                range(40000, 40999): {
                    "name": "Segovia",
                    "adjective": "segoviano",
                    "region": "Castilla y Le√≥n",
                },
                # Soria (42xxx)
                range(42000, 42999): {
                    "name": "Soria",
                    "adjective": "soriano",
                    "region": "Castilla y Le√≥n",
                },
                # Palencia (34xxx)
                range(34000, 34999): {
                    "name": "Palencia",
                    "adjective": "palentino",
                    "region": "Castilla y Le√≥n",
                },
                # Zamora (49xxx)
                range(49000, 49999): {
                    "name": "Zamora",
                    "adjective": "zamorano",
                    "region": "Castilla y Le√≥n",
                },
                # Huelva (21xxx)
                range(21000, 21999): {
                    "name": "Huelva",
                    "adjective": "onubense",
                    "region": "Andaluc√≠a",
                },
                # C√°diz (11xxx)
                range(11000, 11999): {
                    "name": "C√°diz",
                    "adjective": "gaditano",
                    "region": "Andaluc√≠a",
                },
                # Ja√©n (23xxx)
                range(23000, 23999): {
                    "name": "Ja√©n",
                    "adjective": "jiennense",
                    "region": "Andaluc√≠a",
                },
                # Logro√±o (26xxx)
                range(26000, 26999): {
                    "name": "Logro√±o",
                    "adjective": "logro√±√©s",
                    "region": "La Rioja",
                },
                # Huesca (22xxx)
                range(22000, 22999): {
                    "name": "Huesca",
                    "adjective": "oscense",
                    "region": "Arag√≥n",
                },
                # Teruel (44xxx)
                range(44000, 44999): {
                    "name": "Teruel",
                    "adjective": "turolense",
                    "region": "Arag√≥n",
                },
                # Castell√≥n (12xxx)
                range(12000, 12999): {
                    "name": "Castell√≥n",
                    "adjective": "castellonense",
                    "region": "Valencia",
                },
                # Tarragona (43xxx)
                range(43000, 43999): {
                    "name": "Tarragona",
                    "adjective": "tarraconense",
                    "region": "Catalu√±a",
                },
                # Lleida (25xxx)
                range(25000, 25999): {
                    "name": "Lleida",
                    "adjective": "leridano",
                    "region": "Catalu√±a",
                },
                # Girona (17xxx)
                range(17000, 17999): {
                    "name": "Girona",
                    "adjective": "gerundense",
                    "region": "Catalu√±a",
                },
                # Lugo (27xxx)
                range(27000, 27999): {
                    "name": "Lugo",
                    "adjective": "lucense",
                    "region": "Galicia",
                },
                # Ourense (32xxx)
                range(32000, 32999): {
                    "name": "Ourense",
                    "adjective": "ourensano",
                    "region": "Galicia",
                },
                # Pontevedra (36xxx - espec√≠fico para ciudad)
                range(36200, 36299): {
                    "name": "Pontevedra",
                    "adjective": "pontevedr√©s",
                    "region": "Galicia",
                },
                # Ceuta (51xxx) - Ciudad Aut√≥noma
                range(51000, 51999): {
                    "name": "Ceuta",
                    "adjective": "ceut√≠",
                    "region": "Ceuta",
                },
                # Melilla (52xxx) - Ciudad Aut√≥noma
                range(52000, 52999): {
                    "name": "Melilla",
                    "adjective": "melillense",
                    "region": "Melilla",
                },
            }

            # Detectar si es c√≥digo postal num√©rico
            if location_clean.isdigit() and len(location_clean) == 5:
                postal_code = int(location_clean)
                for code_range, city_info in postal_ranges.items():
                    if postal_code in code_range:
                        return city_info

                # Si no encuentra rango espec√≠fico, usar primer d√≠gito para provincia
                first_digit = int(location_clean[0])
                province_mapping = {
                    1: {"name": "√Ålava", "adjective": "alav√©s", "region": "Pa√≠s Vasco"},
                    2: {
                        "name": "Albacete",
                        "adjective": "albacete√±o",
                        "region": "Castilla-La Mancha",
                    },
                    3: {
                        "name": "Alicante",
                        "adjective": "alicantino",
                        "region": "Valencia",
                    },
                    4: {
                        "name": "Almer√≠a",
                        "adjective": "almeriense",
                        "region": "Andaluc√≠a",
                    },
                    5: {
                        "name": "√Åvila",
                        "adjective": "abulense",
                        "region": "Castilla y Le√≥n",
                    },
                }
                return province_mapping.get(
                    first_digit,
                    {"name": "Madrid", "adjective": "madrile√±o", "region": "Madrid"},
                )

            # Mapeo directo de nombres de ciudades
            city_names = {
                "MADRID": {
                    "name": "Madrid",
                    "adjective": "madrile√±o",
                    "region": "Madrid",
                },
                "BARCELONA": {
                    "name": "Barcelona",
                    "adjective": "barcelon√©s",
                    "region": "Catalu√±a",
                },
                "VALENCIA": {
                    "name": "Valencia",
                    "adjective": "valenciano",
                    "region": "Valencia",
                },
                "SEVILLA": {
                    "name": "Sevilla",
                    "adjective": "sevillano",
                    "region": "Andaluc√≠a",
                },
                "ZARAGOZA": {
                    "name": "Zaragoza",
                    "adjective": "zaragozano",
                    "region": "Arag√≥n",
                },
                "M√ÅLAGA": {
                    "name": "M√°laga",
                    "adjective": "malague√±o",
                    "region": "Andaluc√≠a",
                },
                "MALAGA": {
                    "name": "M√°laga",
                    "adjective": "malague√±o",
                    "region": "Andaluc√≠a",
                },
                "MURCIA": {
                    "name": "Murcia",
                    "adjective": "murciano",
                    "region": "Murcia",
                },
                "PALMA": {
                    "name": "Palma",
                    "adjective": "palmesano",
                    "region": "Baleares",
                },
                "LAS PALMAS": {
                    "name": "Las Palmas",
                    "adjective": "palmense",
                    "region": "Canarias",
                },
                "BILBAO": {
                    "name": "Bilbao",
                    "adjective": "bilba√≠no",
                    "region": "Pa√≠s Vasco",
                },
                "ALICANTE": {
                    "name": "Alicante",
                    "adjective": "alicantino",
                    "region": "Valencia",
                },
                "C√ìRDOBA": {
                    "name": "C√≥rdoba",
                    "adjective": "cordob√©s",
                    "region": "Andaluc√≠a",
                },
                "CORDOBA": {
                    "name": "C√≥rdoba",
                    "adjective": "cordob√©s",
                    "region": "Andaluc√≠a",
                },
                "VALLADOLID": {
                    "name": "Valladolid",
                    "adjective": "vallisoletano",
                    "region": "Castilla y Le√≥n",
                },
                "VIGO": {"name": "Vigo", "adjective": "vigu√©s", "region": "Galicia"},
                "GIJ√ìN": {
                    "name": "Gij√≥n",
                    "adjective": "gijon√©s",
                    "region": "Asturias",
                },
                "GIJON": {
                    "name": "Gij√≥n",
                    "adjective": "gijon√©s",
                    "region": "Asturias",
                },
                "GRANADA": {
                    "name": "Granada",
                    "adjective": "granadino",
                    "region": "Andaluc√≠a",
                },
                "VITORIA": {
                    "name": "Vitoria",
                    "adjective": "vitoriano",
                    "region": "Pa√≠s Vasco",
                },
                "A CORU√ëA": {
                    "name": "A Coru√±a",
                    "adjective": "coru√±√©s",
                    "region": "Galicia",
                },
                "LA CORU√ëA": {
                    "name": "A Coru√±a",
                    "adjective": "coru√±√©s",
                    "region": "Galicia",
                },
                "ELCHE": {
                    "name": "Elche",
                    "adjective": "ilicitano",
                    "region": "Valencia",
                },
                "OVIEDO": {
                    "name": "Oviedo",
                    "adjective": "ovetense",
                    "region": "Asturias",
                },
                "PAMPLONA": {
                    "name": "Pamplona",
                    "adjective": "pamplon√©s",
                    "region": "Navarra",
                },
                "SAN SEBASTI√ÅN": {
                    "name": "San Sebasti√°n",
                    "adjective": "donostiarra",
                    "region": "Pa√≠s Vasco",
                },
                "SAN SEBASTIAN": {
                    "name": "San Sebasti√°n",
                    "adjective": "donostiarra",
                    "region": "Pa√≠s Vasco",
                },
                "SANTANDER": {
                    "name": "Santander",
                    "adjective": "santanderino",
                    "region": "Cantabria",
                },
                "LE√ìN": {
                    "name": "Le√≥n",
                    "adjective": "leon√©s",
                    "region": "Castilla y Le√≥n",
                },
                "LEON": {
                    "name": "Le√≥n",
                    "adjective": "leon√©s",
                    "region": "Castilla y Le√≥n",
                },
                "BURGOS": {
                    "name": "Burgos",
                    "adjective": "burgal√©s",
                    "region": "Castilla y Le√≥n",
                },
                "SALAMANCA": {
                    "name": "Salamanca",
                    "adjective": "salmantino",
                    "region": "Castilla y Le√≥n",
                },
                "C√ÅCERES": {
                    "name": "C√°ceres",
                    "adjective": "cacere√±o",
                    "region": "Extremadura",
                },
                "CACERES": {
                    "name": "C√°ceres",
                    "adjective": "cacere√±o",
                    "region": "Extremadura",
                },
                "BADAJOZ": {
                    "name": "Badajoz",
                    "adjective": "pacense",
                    "region": "Extremadura",
                },
                "TOLEDO": {
                    "name": "Toledo",
                    "adjective": "toledano",
                    "region": "Castilla-La Mancha",
                },
                "CIUDAD REAL": {
                    "name": "Ciudad Real",
                    "adjective": "ciudadreale√±o",
                    "region": "Castilla-La Mancha",
                },
                "ALBACETE": {
                    "name": "Albacete",
                    "adjective": "albacete√±o",
                    "region": "Castilla-La Mancha",
                },
                "CUENCA": {
                    "name": "Cuenca",
                    "adjective": "conquense",
                    "region": "Castilla-La Mancha",
                },
                "GUADALAJARA": {
                    "name": "Guadalajara",
                    "adjective": "guadalajare√±o",
                    "region": "Castilla-La Mancha",
                },
                "√ÅVILA": {
                    "name": "√Åvila",
                    "adjective": "abulense",
                    "region": "Castilla y Le√≥n",
                },
                "AVILA": {
                    "name": "√Åvila",
                    "adjective": "abulense",
                    "region": "Castilla y Le√≥n",
                },
                "SEGOVIA": {
                    "name": "Segovia",
                    "adjective": "segoviano",
                    "region": "Castilla y Le√≥n",
                },
                "SORIA": {
                    "name": "Soria",
                    "adjective": "soriano",
                    "region": "Castilla y Le√≥n",
                },
                "PALENCIA": {
                    "name": "Palencia",
                    "adjective": "palentino",
                    "region": "Castilla y Le√≥n",
                },
                "ZAMORA": {
                    "name": "Zamora",
                    "adjective": "zamorano",
                    "region": "Castilla y Le√≥n",
                },
                "HUELVA": {
                    "name": "Huelva",
                    "adjective": "onubense",
                    "region": "Andaluc√≠a",
                },
                "C√ÅDIZ": {
                    "name": "C√°diz",
                    "adjective": "gaditano",
                    "region": "Andaluc√≠a",
                },
                "CADIZ": {
                    "name": "C√°diz",
                    "adjective": "gaditano",
                    "region": "Andaluc√≠a",
                },
                "JA√âN": {
                    "name": "Ja√©n",
                    "adjective": "jiennense",
                    "region": "Andaluc√≠a",
                },
                "JAEN": {
                    "name": "Ja√©n",
                    "adjective": "jiennense",
                    "region": "Andaluc√≠a",
                },
                "LOGRO√ëO": {
                    "name": "Logro√±o",
                    "adjective": "logro√±√©s",
                    "region": "La Rioja",
                },
                "LOGRONO": {
                    "name": "Logro√±o",
                    "adjective": "logro√±√©s",
                    "region": "La Rioja",
                },
                "HUESCA": {
                    "name": "Huesca",
                    "adjective": "oscense",
                    "region": "Arag√≥n",
                },
                "TERUEL": {
                    "name": "Teruel",
                    "adjective": "turolense",
                    "region": "Arag√≥n",
                },
                "CASTELL√ìN": {
                    "name": "Castell√≥n",
                    "adjective": "castellonense",
                    "region": "Valencia",
                },
                "CASTELLON": {
                    "name": "Castell√≥n",
                    "adjective": "castellonense",
                    "region": "Valencia",
                },
                "TARRAGONA": {
                    "name": "Tarragona",
                    "adjective": "tarraconense",
                    "region": "Catalu√±a",
                },
                "LLEIDA": {
                    "name": "Lleida",
                    "adjective": "leridano",
                    "region": "Catalu√±a",
                },
                "GIRONA": {
                    "name": "Girona",
                    "adjective": "gerundense",
                    "region": "Catalu√±a",
                },
                "LUGO": {
                    "name": "Lugo",
                    "adjective": "lucense",
                    "region": "Galicia",
                },
                "OURENSE": {
                    "name": "Ourense",
                    "adjective": "ourensano",
                    "region": "Galicia",
                },
                "PONTEVEDRA": {
                    "name": "Pontevedra",
                    "adjective": "pontevedr√©s",
                    "region": "Galicia",
                },
                "CEUTA": {
                    "name": "Ceuta",
                    "adjective": "ceut√≠",
                    "region": "Ceuta",
                },
                "MELILLA": {
                    "name": "Melilla",
                    "adjective": "melillense",
                    "region": "Melilla",
                },
            }

            # Buscar coincidencia directa
            if location_clean in city_names:
                return city_names[location_clean]

            # Buscar coincidencia parcial
            for city_key, city_info in city_names.items():
                if city_key in location_clean or location_clean in city_key:
                    return city_info

            # Fallback: extraer primera palabra como ciudad
            first_word = location_clean.split()[0] if location_clean else "MADRID"
            return {
                "name": first_word.title(),
                "adjective": "local",
                "region": "Espa√±a",
            }

        except Exception as e:
            logger.error(f"‚ùå Error extrayendo contexto geogr√°fico: {str(e)}")
            return {"name": "Madrid", "adjective": "madrile√±o", "region": "Madrid"}

    def _detect_location_in_message(self, user_message: str) -> Optional[str]:
        """
        Detecta ubicaci√≥n espec√≠fica mencionada en mensaje del usuario
        Reconoce ciudades, c√≥digos postales y referencias geogr√°ficas naturales
        """
        try:
            if not user_message:
                return None

            message_upper = user_message.upper()

            # Patrones de ubicaci√≥n en lenguaje natural
            location_patterns = [
                # Ciudades principales con diferentes formas
                ("MADRID", "Madrid,ES"),
                ("BARCELONA", "Barcelona,ES"),
                ("VALENCIA", "Valencia,ES"),
                ("SEVILLA", "Sevilla,ES"),
                ("ZARAGOZA", "Zaragoza,ES"),
                ("M√ÅLAGA", "M√°laga,ES"),
                ("MALAGA", "M√°laga,ES"),
                ("MURCIA", "Murcia,ES"),
                ("PALMA", "Palma,ES"),
                ("LAS PALMAS", "Las Palmas,ES"),
                ("BILBAO", "Bilbao,ES"),
                ("ALICANTE", "Alicante,ES"),
                ("C√ìRDOBA", "C√≥rdoba,ES"),
                ("CORDOBA", "C√≥rdoba,ES"),
                ("VALLADOLID", "Valladolid,ES"),
                ("VIGO", "Vigo,ES"),
                ("GIJ√ìN", "Gij√≥n,ES"),
                ("GIJON", "Gij√≥n,ES"),
                ("GRANADA", "Granada,ES"),
                ("VITORIA", "Vitoria,ES"),
                ("A CORU√ëA", "A Coru√±a,ES"),
                ("LA CORU√ëA", "A Coru√±a,ES"),
                ("ELCHE", "Elche,ES"),
                ("OVIEDO", "Oviedo,ES"),
                ("PAMPLONA", "Pamplona,ES"),
                ("SAN SEBASTI√ÅN", "San Sebasti√°n,ES"),
                ("SAN SEBASTIAN", "San Sebasti√°n,ES"),
                ("ALMER√çA", "Almer√≠a,ES"),
                ("ALMERIA", "Almer√≠a,ES"),
                ("SANTANDER", "Santander,ES"),
                ("TOLEDO", "Toledo,ES"),
                ("BADAJOZ", "Badajoz,ES"),
                ("SALAMANCA", "Salamanca,ES"),
                ("HUELVA", "Huelva,ES"),
                ("LLEIDA", "Lleida,ES"),
                ("TARRAGONA", "Tarragona,ES"),
                ("C√ÅDIZ", "C√°diz,ES"),
                ("CADIZ", "C√°diz,ES"),
                ("JA√âN", "Ja√©n,ES"),
                ("JAEN", "Ja√©n,ES"),
                ("OURENSE", "Ourense,ES"),
                ("PONTEVEDRA", "Pontevedra,ES"),
                ("LUGO", "Lugo,ES"),
                ("LE√ìN", "Le√≥n,ES"),
                ("LEON", "Le√≥n,ES"),
                ("PALENCIA", "Palencia,ES"),
                ("BURGOS", "Burgos,ES"),
                ("SORIA", "Soria,ES"),
                ("SEGOVIA", "Segovia,ES"),
                ("√ÅVILA", "√Åvila,ES"),
                ("AVILA", "√Åvila,ES"),
                ("GUADALAJARA", "Guadalajara,ES"),
                ("CUENCA", "Cuenca,ES"),
                ("ALBACETE", "Albacete,ES"),
                ("CIUDAD REAL", "Ciudad Real,ES"),
                ("C√ÅCERES", "C√°ceres,ES"),
                ("M√âRIDA", "M√©rida,ES"),
                ("LOGRO√ëO", "Logro√±o,ES"),
                ("LOGRO√ëO", "Logro√±o,ES"),
                ("HUESCA", "Huesca,ES"),
                ("TERUEL", "Teruel,ES"),
                ("CASTELL√ìN", "Castell√≥n,ES"),
                ("CASTELLON", "Castell√≥n,ES"),
                ("SANTANDER", "Santander,ES"),
                ("LE√ìN", "Le√≥n,ES"),
                ("LEON", "Le√≥n,ES"),
                ("BURGOS", "Burgos,ES"),
                ("SALAMANCA", "Salamanca,ES"),
                ("C√ÅCERES", "C√°ceres,ES"),
                ("CACERES", "C√°ceres,ES"),
                ("BADAJOZ", "Badajoz,ES"),
                ("TOLEDO", "Toledo,ES"),
                ("CIUDAD REAL", "Ciudad Real,ES"),
                ("ALBACETE", "Albacete,ES"),
                ("CUENCA", "Cuenca,ES"),
                ("GUADALAJARA", "Guadalajara,ES"),
                ("√ÅVILA", "√Åvila,ES"),
                ("AVILA", "√Åvila,ES"),
                ("SEGOVIA", "Segovia,ES"),
                ("SORIA", "Soria,ES"),
                ("PALENCIA", "Palencia,ES"),
                ("ZAMORA", "Zamora,ES"),
                ("HUELVA", "Huelva,ES"),
                ("C√ÅDIZ", "C√°diz,ES"),
                ("CADIZ", "C√°diz,ES"),
                ("JA√âN", "Ja√©n,ES"),
                ("JAEN", "Ja√©n,ES"),
                ("LOGRO√ëO", "Logro√±o,ES"),
                ("LOGRONO", "Logro√±o,ES"),
                ("HUESCA", "Huesca,ES"),
                ("TERUEL", "Teruel,ES"),
                ("TARRAGONA", "Tarragona,ES"),
                ("LLEIDA", "Lleida,ES"),
                ("GIRONA", "Girona,ES"),
                ("LUGO", "Lugo,ES"),
                ("OURENSE", "Ourense,ES"),
                ("PONTEVEDRA", "Pontevedra,ES"),
                ("CEUTA", "Ceuta,ES"),
                ("MELILLA", "Melilla,ES"),
            ]

            # Buscar ciudades mencionadas directamente
            for city_pattern, location_code in location_patterns:
                if city_pattern in message_upper:
                    return location_code

            # Detectar c√≥digos postales mencionados (5 d√≠gitos)
            postal_matches = re.findall(r"\b(\d{5})\b", user_message)
            if postal_matches:
                # Usar el primer c√≥digo postal encontrado
                return str(postal_matches[0])

            # Detectar frases contextuales con ubicaci√≥n
            contextual_patterns = [
                (r"EN ([A-Z√Å√â√ç√ì√ö√ë\s]+)", r"\1,ES"),
                (r"DE ([A-Z√Å√â√ç√ì√ö√ë\s]+)", r"\1,ES"),
                (r"DESDE ([A-Z√Å√â√ç√ì√ö√ë\s]+)", r"\1,ES"),
                (r"AQU√ç EN ([A-Z√Å√â√ç√ì√ö√ë\s]+)", r"\1,ES"),
                (r"SOY DE ([A-Z√Å√â√ç√ì√ö√ë\s]+)", r"\1,ES"),
                (r"VIVO EN ([A-Z√Å√â√ç√ì√ö√ë\s]+)", r"\1,ES"),
                (r"ESTOY EN ([A-Z√Å√â√ç√ì√ö√ë\s]+)", r"\1,ES"),
            ]

            for pattern, replacement in contextual_patterns:
                match = re.search(pattern, message_upper)
                if match:
                    location_mentioned = match.group(1).strip()
                    # Verificar si la ubicaci√≥n mencionada es una ciudad conocida
                    for city_pattern, location_code in location_patterns:
                        if city_pattern in location_mentioned:
                            return location_code
                    # Si no es ciudad conocida, usar tal como est√°
                    return f"{location_mentioned.title()},ES"

            return None

        except Exception as e:
            logger.error(f"‚ùå Error detectando ubicaci√≥n en mensaje: {str(e)}")
            return None

    def _detect_relevant_links(self, text: str) -> List[SmarwattLink]:
        """FUNCI√ìN DESHABILITADA - No detectar enlaces autom√°ticamente"""
        return []

    def _calculate_relevance_score(self, text: str, link: SmarwattLink) -> int:
        """FUNCI√ìN DESHABILITADA - No calcular relevancia autom√°tica"""
        return 0

    def _add_contextual_links(self, response: str, links: List[SmarwattLink]) -> str:
        """FUNCI√ìN DESHABILITADA - No a√±adir enlaces robotizados"""
        return response

    def _format_link_suggestions(self, links: List[SmarwattLink]) -> str:
        """FUNCI√ìN DESHABILITADA - No formatear enlaces con asteriscos"""
        return ""

    def get_direct_link(self, link_type: str) -> Optional[str]:
        """Obtiene enlace directo por tipo espec√≠fico"""
        try:
            if link_type in self.smarwatt_links:
                return self.smarwatt_links[link_type].url
            return None

        except Exception as e:
            logger.error(f"‚ùå Error obteniendo enlace directo: {str(e)}")
            return None

    def get_enterprise_status(self) -> Dict[str, Any]:
        """Retorna estado empresarial del servicio"""
        try:
            return {
                "service_name": "EnterpriseLinkService",
                "status": "active",
                "links_configured": len(self.smarwatt_links),
                "available_links": list(self.smarwatt_links.keys()),
                "version": "2025_enterprise",
            }

        except Exception as e:
            logger.error(f"‚ùå Error obteniendo status: {str(e)}")
            return {"status": "error", "error": str(e)}


# üè¢ INSTANCIA SINGLETON EMPRESARIAL
_enterprise_link_service_instance = None


def get_enterprise_link_service() -> EnterpriseLinkService:
    """Factory function para obtener instancia singleton del servicio"""
    global _enterprise_link_service_instance

    if _enterprise_link_service_instance is None:
        _enterprise_link_service_instance = EnterpriseLinkService()
        logger.info("üè¢ EnterpriseLinkService singleton inicializado")

    return _enterprise_link_service_instance


logger.info("‚úÖ M√≥dulo EnterpriseLinkService cargado correctamente")
