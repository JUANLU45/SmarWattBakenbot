#!/usr/bin/env python3
"""
üî• ACTUALIZADOR AUTOM√ÅTICO DE TARIFAS ESIOS - SMARWATT
========================================================

Script robusto para actualizaci√≥n autom√°tica de tarifas desde API ESIOS oficial
Conecta directamente con Red El√©ctrica de Espa√±a y actualiza tu sistema SmarWatt

‚è∞ FRECUENCIA DE ACTUALIZACI√ìN ESIOS (INVESTIGADO):
- PVPC (Precio Voluntario Peque√±o Consumidor): DIARIO a las 20:15h
- Mercado Spot: DIARIO a las 20:15h (d√≠a siguiente)
- Tarifas de acceso: MENSUALES (1¬∫ de cada mes)
- Servicios de ajuste: DIARIOS a las 20:15h

üì° API OFICIAL: https://api.esios.ree.es
üîë AUTENTICACI√ìN: X-API-Key (Solicitar a consultasios@ree.es)

AUTOR: Sistema de Actualizaci√≥n Autom√°tica SmarWatt
FECHA: 21 de julio de 2025
VERSI√ìN: 1.0.0 - PRODUCCI√ìN EMPRESARIAL
"""

import requests
import json
import logging
import schedule
import time
import os
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from pathlib import Path
import sys

# Configuraci√≥n logging robusto
log_file = (
    Path(__file__).parent / "logs" / f"esios_sync_{datetime.now().strftime('%Y%m')}.log"
)
log_file.parent.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler(log_file), logging.StreamHandler(sys.stdout)],
)

logger = logging.getLogger("ESIOSTariffUpdater")


@dataclass
class ESIOSConfig:
    """üîß Configuraci√≥n robusta para API ESIOS"""

    # API ESIOS OFICIAL
    api_base_url: str = "https://api.esios.ree.es"
    api_key: str = os.environ.get(
        "ESIOS_API_KEY", ""
    ).strip()  # CORREGIDO: Limpiar \r\n
    api_version: str = "application/json; application/vnd.esios-api-v1+json"

    # ENDPOINTS ESPEC√çFICOS (INVESTIGADOS)
    indicators_endpoint: str = "/indicators"
    pvpc_indicator_id: int = 1001  # Precio PVPC oficial
    market_spot_id: int = 600  # Mercado spot diario
    access_tariffs_id: int = 2108  # Tarifas de acceso

    # CONFIGURACI√ìN SMARWATT
    smarwatt_admin_url: str = os.environ.get(
        "SMARWATT_ADMIN_URL", "https://energy-ia-api-1010012211318.europe-west1.run.app"
    )
    smarwatt_admin_token: str = os.environ.get("SMARWATT_ADMIN_TOKEN", "")

    # HORARIOS DE ACTUALIZACI√ìN (SEG√öN INVESTIGACI√ìN OFICIAL)
    pvpc_update_hour: int = 21  # 21:00h - 45 min despu√©s de publicaci√≥n oficial
    market_update_hour: int = 21  # 21:00h - mercado spot
    monthly_update_day: int = 2  # D√≠a 2 de cada mes (tarifas acceso)

    # CONFIGURACI√ìN ROBUSTEZ
    request_timeout: int = 30
    max_retries: int = 3
    retry_delay: int = 5
    rate_limit_delay: int = 1  # Segundos entre requests


class ESIOSTariffUpdater:
    """üè¢ Actualizador empresarial de tarifas ESIOS"""

    def __init__(self, config: ESIOSConfig):
        self.config = config

        # Validar configuraci√≥n cr√≠tica
        if not self.config.api_key:
            raise ValueError(
                "ESIOS_API_KEY es obligatorio. Solicitar en consultasios@ree.es"
            )

        if not self.config.smarwatt_admin_token:
            raise ValueError(
                "SMARWATT_ADMIN_TOKEN es obligatorio para autenticaci√≥n admin"
            )

        # Configurar session HTTP
        self.session = requests.Session()
        self.session.headers.update(
            {
                "Accept": self.config.api_version,
                "Content-Type": "application/json",
                "X-API-Key": self.config.api_key,  # CORREGIDO: X-API-Key (may√∫scula)
                "User-Agent": "SmarWatt-ESIOS-Updater/1.0",
            }
        )

        logger.info("üöÄ ESIOSTariffUpdater inicializado correctamente")

    def fetch_esios_data(
        self, indicator_id: int, start_date: str, end_date: str
    ) -> Dict[str, Any]:
        """üì° Obtener datos espec√≠ficos de indicador ESIOS"""

        url = f"{self.config.api_base_url}{self.config.indicators_endpoint}/{indicator_id}"
        params = {
            "start_date": start_date,
            "end_date": end_date,
            "time_trunc": "hour",  # Datos horarios
        }

        for attempt in range(self.config.max_retries):
            try:
                logger.info(
                    f"üîÑ Obteniendo indicador {indicator_id} (intento {attempt + 1})"
                )

                response = self.session.get(
                    url, params=params, timeout=self.config.request_timeout
                )

                if response.status_code == 200:
                    data = response.json()
                    logger.info(
                        f"‚úÖ Datos obtenidos: {len(data.get('indicator', {}).get('values', []))} valores"
                    )
                    return data

                elif response.status_code == 401:
                    raise Exception("‚ùå API Key inv√°lida. Verificar ESIOS_API_KEY")

                elif response.status_code == 429:
                    logger.warning("‚ö†Ô∏è Rate limit alcanzado, esperando...")
                    time.sleep(self.config.rate_limit_delay * (attempt + 1))

                else:
                    logger.warning(
                        f"‚ö†Ô∏è HTTP {response.status_code}: {response.text[:200]}"
                    )

            except requests.exceptions.Timeout:
                logger.warning(f"‚è±Ô∏è Timeout en intento {attempt + 1}")

            except requests.exceptions.RequestException as e:
                logger.error(f"‚ùå Error de conexi√≥n: {str(e)}")

            # Esperar antes del siguiente intento
            if attempt < self.config.max_retries - 1:
                time.sleep(self.config.retry_delay)

        raise Exception(
            f"‚ùå No se pudieron obtener datos del indicador {indicator_id} despu√©s de {self.config.max_retries} intentos"
        )

    def parse_pvpc_data(self, esios_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """üîÑ Convertir datos PVPC ESIOS a formato SmarWatt"""

        tariffs = []
        indicator = esios_data.get("indicator", {})
        values = indicator.get("values", [])

        # Procesar valores horarios PVPC
        current_date = None
        daily_prices = []

        for value in values:
            datetime_utc = value.get("datetime_utc")
            price = float(value.get("value", 0)) / 1000  # MWh ‚Üí kWh

            if not datetime_utc:
                continue

            # Parsear fecha y hora
            dt = datetime.fromisoformat(datetime_utc.replace("Z", "+00:00"))
            date_str = dt.strftime("%Y-%m-%d")
            hour = dt.hour

            # Agrupar por d√≠a
            if current_date != date_str:
                if daily_prices:  # Procesar d√≠a anterior
                    tariffs.append(self._create_pvpc_tariff(current_date, daily_prices))

                current_date = date_str
                daily_prices = []

            daily_prices.append({"hour": hour, "price": price})

        # Procesar √∫ltimo d√≠a
        if daily_prices:
            tariffs.append(self._create_pvpc_tariff(current_date, daily_prices))

        logger.info(f"‚úÖ Procesadas {len(tariffs)} tarifas PVPC")
        return tariffs

    def _create_pvpc_tariff(
        self, date: str, hourly_prices: List[Dict]
    ) -> Dict[str, Any]:
        """üè∑Ô∏è Crear tarifa PVPC en formato SmarWatt"""

        # Calcular precios punta y valle
        prices = [p["price"] for p in hourly_prices]
        peak_hours = list(range(10, 14)) + list(range(18, 22))  # 10-14h y 18-22h

        peak_prices = [p["price"] for p in hourly_prices if p["hour"] in peak_hours]
        valley_prices = [
            p["price"] for p in hourly_prices if p["hour"] not in peak_hours
        ]

        peak_price = sum(peak_prices) / len(peak_prices) if peak_prices else 0
        valley_price = sum(valley_prices) / len(valley_prices) if valley_prices else 0
        avg_price = sum(prices) / len(prices) if prices else 0

        return {
            "supplier_name": "REE (Red El√©ctrica)",
            "tariff_name": f"PVPC {date}",
            "tariff_type": "PVPC",
            "fixed_term_price": 0.123626,  # T√©rmino fijo oficial 2025
            "variable_term_price": avg_price,
            "peak_price": peak_price,
            "valley_price": valley_price,
            "peak_hours": "10:00-14:00,18:00-22:00",
            "valley_hours": "22:00-10:00",
            "discriminated_hourly": True,
            "green_energy_percentage": 45.2,  # Mix energ√©tico Espa√±a 2025
            "contract_permanence_months": 0,
            "cancellation_fee": 0,
            "promotion_description": "Precio oficial regulado",
            "promotion_discount_percentage": 0,
            "promotion_duration_months": 0,
            "indexing_type": "variable_hourly",
            "price_update_frequency": "daily",
            "additional_services": "Tarifa oficial regulada por CNMC",
            "customer_rating": 4.0,
            "esios_indicator_id": self.config.pvpc_indicator_id,
            "esios_date": date,
            "data_source": "esios_api_auto",
        }

    def upload_to_smarwatt(self, tariffs: List[Dict[str, Any]]) -> Dict[str, Any]:
        """üì§ Subir tarifas a SmarWatt usando endpoint existente"""

        if not tariffs:
            return {
                "processed_count": 0,
                "error_count": 0,
                "errors": ["No hay tarifas para subir"],
            }

        url = f"{self.config.smarwatt_admin_url}/admin/tariffs/batch-add"
        headers = {
            "Authorization": f"Bearer {self.config.smarwatt_admin_token}",
            "Content-Type": "application/json",
        }

        payload = {"tariffs": tariffs}

        try:
            logger.info(f"üì§ Subiendo {len(tariffs)} tarifas a SmarWatt...")

            response = requests.post(
                url, headers=headers, json=payload, timeout=self.config.request_timeout
            )

            if response.status_code in [200, 201]:
                result = response.json()
                logger.info(f"‚úÖ Subida exitosa: {result.get('message', 'OK')}")
                return result.get("data", {})
            else:
                error_msg = (
                    f"‚ùå Error HTTP {response.status_code}: {response.text[:300]}"
                )
                logger.error(error_msg)
                return {
                    "processed_count": 0,
                    "error_count": len(tariffs),
                    "errors": [error_msg],
                }

        except requests.exceptions.RequestException as e:
            error_msg = f"‚ùå Error de conexi√≥n con SmarWatt: {str(e)}"
            logger.error(error_msg)
            return {
                "processed_count": 0,
                "error_count": len(tariffs),
                "errors": [error_msg],
            }

    def sync_pvpc_tariffs(self) -> None:
        """üîÑ Sincronizaci√≥n completa de tarifas PVPC"""

        logger.info("üöÄ Iniciando sincronizaci√≥n PVPC...")

        try:
            # Fechas: hoy y ma√±ana (ESIOS publica ma√±ana a las 20:15h)
            today = datetime.now().date()
            tomorrow = today + timedelta(days=1)

            start_date = today.isoformat()
            end_date = tomorrow.isoformat()

            # 1. Obtener datos de ESIOS
            esios_data = self.fetch_esios_data(
                self.config.pvpc_indicator_id, start_date, end_date
            )

            # 2. Procesar datos
            tariffs = self.parse_pvpc_data(esios_data)

            if not tariffs:
                logger.warning("‚ö†Ô∏è No se encontraron tarifas para procesar")
                return

            # 3. Subir a SmarWatt
            result = self.upload_to_smarwatt(tariffs)

            # 4. Reportar resultado
            processed = result.get("processed_count", 0)
            errors = result.get("error_count", 0)

            if processed > 0:
                logger.info(
                    f"üéâ Sincronizaci√≥n PVPC completada: {processed} tarifas actualizadas"
                )

            if errors > 0:
                logger.warning(
                    f"‚ö†Ô∏è {errors} tarifas con errores: {result.get('errors', [])}"
                )

            # Estad√≠sticas de precios para logs
            if tariffs:
                prices = [t["variable_term_price"] for t in tariffs]
                logger.info(
                    f"üìä Rango precios: {min(prices):.4f} - {max(prices):.4f} ‚Ç¨/kWh"
                )

        except Exception as e:
            logger.error(f"üí• Error en sincronizaci√≥n PVPC: {str(e)}")
            raise

    def health_check(self) -> bool:
        """ü©∫ Verificar conectividad con ESIOS y SmarWatt"""

        logger.info("ü©∫ Realizando health check...")

        # Test ESIOS API
        try:
            url = f"{self.config.api_base_url}{self.config.indicators_endpoint}"
            response = self.session.get(url, timeout=10)

            if response.status_code != 200:
                logger.error(f"‚ùå ESIOS API no responde: HTTP {response.status_code}")
                return False

            logger.info("‚úÖ ESIOS API: Conectividad OK")

        except Exception as e:
            logger.error(f"‚ùå Error conectando con ESIOS: {str(e)}")
            return False

        # Test SmarWatt API
        try:
            url = f"{self.config.smarwatt_admin_url}/tariffs/market-data"
            headers = {"Authorization": f"Bearer {self.config.smarwatt_admin_token}"}
            response = requests.get(url, headers=headers, timeout=10)

            if response.status_code != 200:
                logger.error(
                    f"‚ùå SmarWatt API no responde: HTTP {response.status_code}"
                )
                return False

            logger.info("‚úÖ SmarWatt API: Conectividad OK")

        except Exception as e:
            logger.error(f"‚ùå Error conectando con SmarWatt: {str(e)}")
            return False

        logger.info("üéâ Health check completado: Todos los sistemas OK")
        return True


def setup_scheduler(updater: ESIOSTariffUpdater) -> None:
    """‚è∞ Configurar programaci√≥n autom√°tica basada en horarios oficiales ESIOS"""

    logger.info("‚è∞ Configurando programaci√≥n autom√°tica...")

    # SINCRONIZACI√ìN DIARIA PVPC - 21:00h
    schedule.every().day.at("21:00").do(
        lambda: safe_execute(updater.sync_pvpc_tariffs, "Sincronizaci√≥n PVPC diaria")
    )

    # HEALTH CHECK DIARIO - 08:00h
    schedule.every().day.at("08:00").do(
        lambda: safe_execute(updater.health_check, "Health check diario")
    )

    # HEALTH CHECK ANTES DE SINCRONIZACI√ìN - 20:55h
    schedule.every().day.at("20:55").do(
        lambda: safe_execute(updater.health_check, "Health check pre-sincronizaci√≥n")
    )

    logger.info("‚úÖ Programaci√≥n configurada:")
    logger.info("   üìä PVPC: Todos los d√≠as 21:00h")
    logger.info("   ü©∫ Health check: 08:00h y 20:55h")


def safe_execute(func, description: str) -> None:
    """üõ°Ô∏è Ejecutar funci√≥n de forma segura con manejo de errores"""

    try:
        logger.info(f"üöÄ Ejecutando: {description}")
        result = func()
        logger.info(f"‚úÖ Completado: {description}")
        return result

    except Exception as e:
        logger.error(f"üí• Error en {description}: {str(e)}")
        # En producci√≥n, aqu√≠ podr√≠as enviar alertas por email/Slack


def main():
    """üèÅ Funci√≥n principal - Punto de entrada del script"""

    logger.info("üè¢ INICIANDO ACTUALIZADOR ESIOS SMARWATT")
    logger.info("=" * 60)

    try:
        # Configurar sistema
        config = ESIOSConfig()
        updater = ESIOSTariffUpdater(config)

        # Health check inicial
        if not updater.health_check():
            logger.error("‚ùå Health check inicial fall√≥. Abortando...")
            sys.exit(1)

        # Verificar si se debe ejecutar sincronizaci√≥n inmediata
        if len(sys.argv) > 1 and sys.argv[1] == "--sync-now":
            logger.info("üöÄ Ejecutando sincronizaci√≥n inmediata...")
            updater.sync_pvpc_tariffs()
            logger.info("‚úÖ Sincronizaci√≥n inmediata completada")
            return

        # Configurar programaci√≥n autom√°tica
        setup_scheduler(updater)

        logger.info("üîÑ Actualizador en funcionamiento - Presiona Ctrl+C para detener")
        logger.info(f"‚è∞ Pr√≥xima sincronizaci√≥n: {schedule.next_run()}")

        # Loop principal
        while True:
            schedule.run_pending()
            time.sleep(60)  # Revisar cada minuto

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Detenido por usuario")

    except Exception as e:
        logger.error(f"üí• Error cr√≠tico: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()
