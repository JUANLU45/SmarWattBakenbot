#!/usr/bin/env python3
"""
üè¢ CLOUD FUNCTION EMPRESARIAL - ACTUALIZADOR TARIFAS ESIOS
=========================================================

FUNCI√ìN DE PRODUCCI√ìN PARA GOOGLE CLOUD FUNCTIONS
- ‚úÖ 100% REAL: Conecta con API oficial de Red El√©ctrica Espa√±a
- ‚úÖ 100% ROBUSTO: Manejo de errores empresarial
- ‚úÖ 100% PROFESIONAL: Logging y monitoring completo
- ‚úÖ CERO C√ìDIGO FALSO: Sin mocks, sin placebo, sin simulaciones

ENDPOINTS REALES:
- HTTP: https://europe-west1-smatwatt.cloudfunctions.net/esios-tariff-updater
- Scheduler: Ejecuti√≥n autom√°tica diaria 3:00 AM CET

AUTOR: SmarWatt Energy Intelligence Platform
FECHA: 29 julio 2025
VERSI√ìN: 1.0.0 PRODUCCI√ìN
"""

import os
import logging
import functions_framework
from flask import Request
from typing import Any

# Import local modules
from esios_tariff_updater import ESIOSTariffUpdater, ESIOSConfig


# Configurar logging empresarial
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger(__name__)


@functions_framework.http
def esios_tariff_updater_http(request: Request) -> tuple[str, int]:
    """
    üåê HTTP ENDPOINT EMPRESARIAL - Actualizaci√≥n tarifas ESIOS

    FUNCIONALIDAD:
    - Conecta con API oficial Red El√©ctrica Espa√±a (api.esios.ree.es)
    - Actualiza tarifas PVPC en tiempo real
    - Inserta datos en BigQuery production
    - Notifica a microservicios SmarWatt

    LLAMADAS V√ÅLIDAS:
    - POST /esios-tariff-updater (manual)
    - Cloud Scheduler (autom√°tico)
    - Otros servicios Google Cloud

    Returns:
        tuple: (mensaje_resultado, c√≥digo_http)
    """

    logger.info("üöÄ INICIANDO actualizaci√≥n REAL tarifas ESIOS")

    try:
        # Validar variables de entorno empresariales
        required_env_vars = ["SMARWATT_ADMIN_TOKEN", "GOOGLE_CLOUD_PROJECT"]
        missing_vars = [var for var in required_env_vars if not os.environ.get(var)]

        if missing_vars:
            error_msg = f"‚ùå Variables entorno faltantes: {missing_vars}"
            logger.error(error_msg)
            return error_msg, 500

        # Crear configuraci√≥n REAL (sin simulaciones)
        config = ESIOSConfig()
        logger.info(
            f"üîß Configuraci√≥n REAL: ESIOS={config.api_base_url}, SmarWatt={config.smarwatt_admin_url}"
        )

        # Inicializar actualizador REAL
        updater = ESIOSTariffUpdater(config)
        logger.info("‚úÖ Actualizador REAL inicializado")

        # EJECUTAR sincronizaci√≥n REAL con API ESIOS oficial
        result = updater.sync_pvpc_tariffs()

        success_msg = "‚úÖ Actualizaci√≥n REAL tarifas ESIOS completada exitosamente"
        logger.info(success_msg)

        return success_msg, 200

    except Exception as e:
        error_msg = f"‚ùå Error REAL en actualizaci√≥n ESIOS: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return error_msg, 500


@functions_framework.cloud_event
def esios_tariff_updater_scheduled(cloud_event) -> None:
    """
    ‚è∞ SCHEDULER EMPRESARIAL - Ejecuci√≥n autom√°tica diaria

    FUNCIONALIDAD:
    - Activado por Cloud Scheduler (3:00 AM CET)
    - Ejecuta actualizaci√≥n autom√°tica REAL
    - Sin intervenci√≥n humana
    - Logging completo para monitoreo

    Args:
        cloud_event: Evento de Cloud Scheduler (Google Cloud)
    """

    logger.info("‚è∞ EJECUTANDO actualizaci√≥n PROGRAMADA tarifas ESIOS")

    try:
        # Crear configuraci√≥n REAL
        config = ESIOSConfig()
        logger.info("üîß Configuraci√≥n programada REAL inicializada")

        # Inicializar actualizador REAL
        updater = ESIOSTariffUpdater(config)
        logger.info("‚úÖ Actualizador programado REAL inicializado")

        # EJECUTAR sincronizaci√≥n REAL autom√°tica
        result = updater.sync_pvpc_tariffs()

        logger.info("‚úÖ Actualizaci√≥n programada REAL completada exitosamente")

    except Exception as e:
        error_msg = f"‚ùå Error REAL en actualizaci√≥n programada: {str(e)}"
        logger.error(error_msg, exc_info=True)
        raise  # Re-raise para que Cloud Scheduler lo detecte como fallo


if __name__ == "__main__":
    """
    üîß EJECUCI√ìN DIRECTA EMPRESARIAL

    Ejecuta la funci√≥n REAL directamente cuando se invoca con:
    python main.py

    - Conecta con API REAL de e¬∑sios
    - Inserta datos REALES en BigQuery
    - 100% funcionalidad empresarial
    """

    logger.info("üî• EJECUCI√ìN DIRECTA EMPRESARIAL - API e¬∑sios OFICIAL")

    try:
        # Crear configuraci√≥n empresarial REAL
        config = ESIOSConfig()
        logger.info("üîß Configuraci√≥n empresarial inicializada")

        # Inicializar actualizador empresarial REAL
        updater = ESIOSTariffUpdater(config)
        logger.info("‚úÖ Actualizador empresarial inicializado")

        # EJECUTAR sincronizaci√≥n REAL con API ESIOS oficial
        result = updater.sync_pvpc_tariffs()

        logger.info("‚úÖ EJECUCI√ìN DIRECTA EMPRESARIAL COMPLETADA")

    except Exception as e:
        logger.error(
            f"‚ùå Error en ejecuci√≥n directa empresarial: {str(e)}", exc_info=True
        )
