# VERIFICACI√ìN FINAL DE LA L√ìGICA CORREGIDA
import re

# Mensajes del usuario para verificar
test_messages = [
    # ‚ùå ESTOS NO DEBEN ACTIVAR EL RECOMENDADOR
    "Dime el precio de la energ√≠a",
    "Cuanto cuesta el kWh ahora",
    "Precio actual de la electricidad",
    "Qu√© precio tiene la energ√≠a",
    "Factura muy cara este mes",
    "Consumo mucho en casa",
    # ‚úÖ ESTOS S√ç DEBEN ACTIVAR EL RECOMENDADOR
    "Recomi√©ndame una tarifa mejor",
    "Qu√© tarifas hay disponibles",
    "Cambiar de tarifa",
    "Otras opciones de tarifas",
    "Ahorrar con tarifa diferente",
    "Comparar tarifas",
    "Cu√°l es la mejor tarifa para mi",
    "Tarifas disponibles ahora",
]


# Nueva l√≥gica CORREGIDA
def should_consult_expert_bot_new(user_message):
    message_lower = user_message.lower()

    # Palabras clave espec√≠ficas para recomendaciones (SIN FALSOS POSITIVOS)
    recommendation_keywords = [
        "recomienda",
        "recomiendame",
        "recomi√©ndame",
        "recomendaci√≥n",
        "recomendaciones",
        "mejor tarifa",
        "qu√© tarifa",
        "qu√© tarifas",
        "que tarifas",
        "cu√°l tarifa",
        "cual tarifa",
        "cu√°les tarifas",
        "cuales tarifas",
        "dime tarifas",
        "cambiar tarifa",
        "cambio tarifa",
        "cambio de tarifa",
        "cambiar de tarifa",
        "comparar tarifas",
        "comparar tarifa",
        "alternativas tarifas",
        "otras tarifas",
        "otras opciones tarifas",
    ]

    # Palabras clave de ahorro con contexto espec√≠fico
    savings_with_context = [
        "ahorrar tarifa",
        "ahorro tarifa",
        "ahorrar con tarifa",
        "ahorro con tarifa",
        "ahorrar cambiando",
        "ahorro cambiando",
    ]

    # Verificar recomendaciones espec√≠ficas
    has_recommendation_intent = any(
        keyword in message_lower for keyword in recommendation_keywords
    )

    # Verificar ahorro con contexto espec√≠fico
    has_savings_intent = any(
        keyword in message_lower for keyword in savings_with_context
    )

    # Verificar solicitudes directas de tarifas disponibles
    direct_tariff_requests = [
        "tarifas hay",
        "qu√© tarifas hay",
        "que tarifas hay",
        "tarifas existen",
        "tarifas disponibles",
        "opciones de tarifas",
        "opciones tarifas",
    ]

    has_direct_tariff_request = any(
        phrase in message_lower for phrase in direct_tariff_requests
    )

    # Condici√≥n robusta: SOLO consultar si hay intenci√≥n clara de recomendaci√≥n
    should_consult = bool(
        has_recommendation_intent or has_savings_intent or has_direct_tariff_request
    )

    return should_consult


print("üîç VERIFICACI√ìN FINAL DE LA L√ìGICA CORREGIDA")
print("=" * 60)

no_debe_activar = []
si_debe_activar = []

for i, message in enumerate(test_messages):
    result = should_consult_expert_bot_new(message)
    print(f"{i+1:2d}. {'‚úÖ' if result else '‚ùå'} {message}")

    if i < 6:  # Primeros 6 NO deben activar
        if result:
            no_debe_activar.append(message)
    else:  # √öltimos S√ç deben activar
        if not result:
            si_debe_activar.append(message)

print(f"\nüìä RESULTADO FINAL:")
print(f"‚ùå Falsos positivos (NO deben activar pero activan): {len(no_debe_activar)}")
print(f"‚ùå Falsos negativos (S√ç deben activar pero no activan): {len(si_debe_activar)}")

if len(no_debe_activar) == 0 and len(si_debe_activar) == 0:
    print("üéâ ¬°PERFECTO! La l√≥gica funciona correctamente para todos los casos")
else:
    if no_debe_activar:
        print("‚ö†Ô∏è Problemas con falsos positivos:")
        for msg in no_debe_activar:
            print(f"   - {msg}")
    if si_debe_activar:
        print("‚ö†Ô∏è Problemas con falsos negativos:")
        for msg in si_debe_activar:
            print(f"   - {msg}")
