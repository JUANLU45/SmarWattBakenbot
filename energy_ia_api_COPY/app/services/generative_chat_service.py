# energy_ia_api_COPY/app/services/generative_chat_service.py
# üè¢ SERVICIO DE CHAT GENERATIVO EMPRESARIAL NIVEL 2025

# Standard library imports
import json
import logging
import time
import uuid
from datetime import datetime
from typing import Dict, List, Any, Optional

# Third-party imports
import google.generativeai as genai  # type: ignore
from flask import current_app, request
from google.cloud import bigquery  # type: ignore
import requests

# Local imports
from smarwatt_auth import EnterpriseAuth
from utils.error_handlers import AppError
from utils.timezone_utils import now_spanish_iso
from app.services.enterprise_links_service import get_enterprise_link_service


class EnterpriseGenerativeChatService:
    """
    üè¢ SERVICIO DE CHAT GENERATIVO EMPRESARIAL 2025
    Gestiona conversaciones con modelo de lenguaje grande (Gemini) con:
    - Personalizaci√≥n empresarial m√°xima
    - An√°lisis de sentiment en tiempo real v√≠a HTTP
    - Comunicaci√≥n robusta con expert_bot_api
    - Logging empresarial completo
    - Arquitectura de microservicios independientes
    """

    def __init__(self) -> None:
        self.enterprise_auth: EnterpriseAuth = EnterpriseAuth()
        self.bigquery_client: Optional[bigquery.Client] = None
        self.model: Optional[Any] = None
        self.project_id: Optional[str] = None
        self.bq_dataset_id: Optional[str] = None
        self.interaction_log_table: Optional[str] = None
        self.learning_table: Optional[str] = None

        # üîó SERVICIO DE ENLACES EMPRESARIAL
        self.links_service = get_enterprise_link_service()

        logging.info(
            "‚úÖ EnterpriseGenerativeChatService con arquitectura de microservicios independientes"
        )

        self._initialize_gemini_model()
        self._initialize_bigquery_client()

        logging.info("üè¢ EnterpriseGenerativeChatService inicializado con IA avanzada")

    def _initialize_gemini_model(self) -> None:
        """Inicializa el modelo Gemini con configuraci√≥n empresarial"""
        try:
            gemini_api_key = current_app.config.get("GEMINI_API_KEY")
            if not gemini_api_key:
                raise AppError("Clave API de Gemini no configurada", 500)

            genai.configure(api_key=gemini_api_key)

            # üß† INSTRUCCIONES EMPRESARIALES AVANZADAS PARA GEMINI
            self.system_instruction = self._build_enterprise_system_instruction()

            # Inicializar modelo con configuraci√≥n empresarial compatible
            self.model = genai.GenerativeModel(
                model_name="gemini-1.5-flash",
                generation_config=genai.types.GenerationConfig(
                    temperature=0.7,
                    top_p=0.9,
                    top_k=40,
                    max_output_tokens=2048,
                ),
                safety_settings=[
                    {
                        "category": "HARM_CATEGORY_HARASSMENT",
                        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
                    },
                    {
                        "category": "HARM_CATEGORY_HATE_SPEECH",
                        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
                    },
                    {
                        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
                    },
                    {
                        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
                    },
                ],
            )

            logging.info("‚úÖ Modelo Gemini empresarial inicializado")

        except Exception as e:
            logging.error(f"‚ùå Error inicializando Gemini: {str(e)}")
            raise AppError(f"Error inicializando servicio de chat: {str(e)}", 500)

    def _initialize_bigquery_client(self) -> None:
        """Inicializa cliente BigQuery para logging empresarial"""
        try:
            self.project_id = current_app.config.get("GCP_PROJECT_ID")
            self.bq_dataset_id = current_app.config.get("BQ_DATASET_ID")
            self.interaction_log_table = current_app.config.get(
                "BQ_CONVERSATIONS_TABLE_ID", "conversations_log"
            )
            self.learning_table = current_app.config.get(
                "BQ_LEARNING_TABLE_ID", "ai_learning_data"
            )

            if self.project_id:
                self.bigquery_client = bigquery.Client(project=self.project_id)
                logging.info("‚úÖ Cliente BigQuery empresarial inicializado")
            else:
                logging.warning("‚ö†Ô∏è GCP_PROJECT_ID no configurado - logging limitado")

        except Exception as e:
            logging.error(f"‚ùå Error inicializando BigQuery: {str(e)}")
            # No es cr√≠tico, contin√∫a sin logging a BigQuery

    def _build_enterprise_system_instruction(self) -> str:
        """Construye instrucciones del sistema empresariales"""
        return (
            "Eres WattBot, un especialista en energ√≠a de SmarWatt con aprendizaje autom√°tico avanzado.\n\n"
            "PERSONALIDAD Y TONO:\n"
            "- Conversaci√≥n natural y fluida, como un experto en energ√≠a hablando con un amigo\n"
            "- Sin jerga t√©cnica innecesaria ni lenguaje robotizado\n"
            "- Respuestas directas y √∫tiles adaptadas al contexto\n"
            "- SIEMPRE saluda al usuario por su nombre cuando est√© disponible\n"
            "- NO uses asteriscos, emojis corporativos excesivos ni formato raro\n\n"
            "QU√â HACES:\n"
            "- Especialista EXCLUSIVO en energ√≠a (nunca generalista)\n"
            "- Ayudas a entender y reducir facturas de luz espec√≠ficamente\n"
            "- Analizas consumos energ√©ticos reales del usuario con IA\n"
            "- Recomiendas tarifas y mejoras de eficiencia espec√≠ficas\n"
            "- Respondes sobre energ√≠a renovable, paneles solares y sostenibilidad\n\n"
            "INTELIGENCIA ARTIFICIAL Y APRENDIZAJE:\n"
            "- Tu IA SIEMPRE conoce todos los datos del usuario (factura, consumo, tarifa, comercializadora)\n"
            "- APRENDE constantemente de cada conversaci√≥n para mejorar recomendaciones\n"
            "- Tienes acceso INMEDIATO a todos los datos cuando los necesites\n"
            "- NUNCA eres generalista - trabajas espec√≠ficamente para ESTE usuario\n\n"
            "ACCESO A DATOS DE MERCADO EN TIEMPO REAL:\n"
            "- SIEMPRE consultas precios actuales cuando pregunten por precios espec√≠ficos\n"
            "- Tienes acceso DIRECTO a tarifas PVPC actualizadas diariamente\n"
            "- NUNCA digas 'no s√© el precio' - SIEMPRE consulta datos reales del mercado\n"
            "- Datos incluyen: precios peak/valley, estad√≠sticas de mercado, PVPC actual\n"
            "- Distingues CLARAMENTE entre consulta de PRECIOS vs RECOMENDACIONES de tarifas\n\n"
            "C√ìMO USAR LOS DATOS ESPEC√çFICOS:\n"
            "- En SALUDOS SIMPLES: Saluda naturalmente, mant√©n contexto energ√©tico sutil\n"
            "- En PREGUNTAS DE ENERG√çA: USA todos los datos espec√≠ficos (comercializadora, coste, kWh, tarifa)\n"
            "- En CONSULTAS T√âCNICAS: Aplica an√°lisis completo con sus cifras reales\n"
            "- Personalizado SOLO cuando la pregunta lo requiera, no siempre\n"
            "- Si tienes informaci√≥n completa, NO pidas m√°s datos\n\n"
            "EJEMPLOS DE RESPUESTAS EXPERTAS:\n"
            "- SALUDO: 'Hola [NOMBRE]! ¬øEn qu√© puedo ayudarte con tu energ√≠a hoy?'\n"
            "- ENERG√çA: 'Con tu consumo de 801 kWh/mes y Naturgy pagando 171‚Ç¨, podr√≠as ahorrar...'\n"
            "- T√âCNICA: 'Tu tarifa \"Por Uso Luz\" no optimiza tus 60% de consumo en valle...'\n\n"
            "INTELIGENCIA CONTEXTUAL:\n"
            "- Adapta la cantidad de datos seg√∫n el tipo de conversaci√≥n\n"
            "- En charla casual: Mant√©n expertise energ√©tico disponible pero no agresivo\n"
            "- En consultas espec√≠ficas: Despliega TODOS los datos y an√°lisis\n"
            "- Experto en energ√≠a espec√≠fico para este usuario SOLO cuando sea relevante\n\n"
            "NUNCA:\n"
            "- Seas generalista o hables de temas no energ√©ticos\n"
            "- Pidas informaci√≥n que ya tienes disponible\n"
            "- Des respuestas gen√©ricas si tienes datos espec√≠ficos\n"
            "- Olvides que eres especialista en energ√≠a con IA avanzada\n\n"
            "Eres un especialista premium en energ√≠a con IA que conoce perfectamente a este usuario espec√≠fico y adapta su expertise al contexto de cada conversaci√≥n."
        )

    def start_new_chat(self) -> Any:
        """Inicia nueva sesi√≥n de chat empresarial"""
        try:
            if self.model is None:
                raise AppError(
                    "El modelo Gemini no est√° inicializado correctamente", 500
                )
            chat_session = self.model.start_chat(history=[])
            logging.info("üí¨ Nueva sesi√≥n de chat empresarial iniciada")
            return chat_session
        except Exception as e:
            logging.error(f"‚ùå Error iniciando chat: {str(e)}")
            raise AppError(f"Error iniciando sesi√≥n de chat: {str(e)}", 500)

    def send_message(
        self,
        chat_session: Any,
        user_message: str,
        user_context: Optional[Dict[str, Any]] = None,
    ) -> Dict[str, Any]:
        """
        üß† ENV√çO DE MENSAJE CON IA EMPRESARIAL AVANZADA
        Procesa mensaje con aprendizaje autom√°tico y personalizaci√≥n m√°xima
        """
        start_time = time.time()

        try:
            # üß† AN√ÅLISIS DE SENTIMENT EN TIEMPO REAL
            sentiment_analysis = self._analyze_message_sentiment(user_message)

            # üß† ENRIQUECIMIENTO CON CONTEXTO EMPRESARIAL
            enhanced_message = self._build_enhanced_message(
                user_message, user_context, sentiment_analysis
            )

            # üîß INCORPORAR INSTRUCCIONES DEL SISTEMA (COMPATIBLE CON VERSI√ìN ACTUAL)
            enhanced_message = f"{self.system_instruction}\n\n{enhanced_message}"

            # üìä COMUNICACI√ìN CON EXPERT_BOT_API SI ES NECESARIO
            if self._should_consult_expert_bot(user_message, user_context):
                try:
                    expert_response = self._consult_expert_bot(
                        user_message, user_context
                    )
                    enhanced_message = self._integrate_expert_response(
                        enhanced_message, expert_response
                    )
                except Exception as expert_error:
                    # üõ°Ô∏è AISLAMIENTO: No romper conversaci√≥n si expert-bot falla
                    logging.warning(f"‚ö†Ô∏è Expert-bot no disponible: {expert_error}")
                    # Continuar sin consulta expert-bot - conversaci√≥n fluye normal

            # ÔøΩ NUEVA FUNCIONALIDAD: CONSULTA DE PRECIOS EN TIEMPO REAL
            if self._should_consult_market_prices(user_message, user_context):
                logging.info(
                    "üîç Detectada consulta de precios - obteniendo datos de mercado"
                )
                market_data = self._get_current_market_prices()

                if market_data:
                    price_info = self._format_market_prices_for_chat(market_data)
                    if price_info:
                        # A√±adir informaci√≥n de precios al contexto
                        enhanced_message = f"{enhanced_message}\n\n[DATOS ACTUALES DEL MERCADO EL√âCTRICO]:\n{price_info}"
                        logging.info(
                            "‚úÖ Datos de mercado a√±adidos al contexto del chat"
                        )
                    else:
                        logging.warning("‚ö†Ô∏è No se pudo formatear informaci√≥n de precios")
                else:
                    logging.warning("‚ö†Ô∏è No se pudieron obtener datos de mercado")

            # ÔøΩüöÄ ENV√çO A GEMINI CON CONFIGURACI√ìN EMPRESARIAL
            response = chat_session.send_message(enhanced_message)
            response_time = time.time() - start_time

            # üìà AN√ÅLISIS DE RESPUESTA PARA APRENDIZAJE
            response_analysis = self._analyze_response_quality(
                user_message, response.text, user_context
            )

            # üîó ENLACES INTELIGENTES SOLO CUANDO EL USUARIO LOS SOLICITA ESPEC√çFICAMENTE
            enhanced_response_with_links = self._add_links_if_user_requests(
                user_message, response.text
            )

            # ‚ú® LIMPIEZA FINAL PARA CONVERSACI√ìN NATURAL (Sin asteriscos)
            final_natural_response = self._make_response_natural(
                enhanced_response_with_links
            )

            # üíæ LOGGING EMPRESARIAL COMPLETO
            interaction_data = self._log_enterprise_interaction(
                user_message,
                final_natural_response,  # üîó Usar respuesta final limpia y natural
                user_context,
                sentiment_analysis,
                response_analysis,
                response_time,
            )

            # üß† ACTUALIZACI√ìN DE APRENDIZAJE AUTOM√ÅTICO CON AI LEARNING SERVICE
            if user_context is not None:
                self._update_learning_patterns(user_context, interaction_data)

            # üß† ACTUALIZACI√ìN DE APRENDIZAJE AUTOM√ÅTICO CON AI LEARNING SERVICE
            if user_context is not None:
                self._update_learning_patterns(user_context, interaction_data)

                # üîó COMUNICACI√ìN HTTP CON EXPERT_BOT_API PARA APRENDIZAJE EMPRESARIAL
                if user_context.get("uid"):
                    try:
                        # Preparar datos para comunicaci√≥n HTTP futura
                        _learning_data = {
                            "user_id": user_context["uid"],
                            "conversation_id": interaction_data.get(
                                "interaction_id", "unknown"
                            ),
                            "user_message": user_message,
                            "bot_response": final_natural_response,
                            "sentiment_analysis": sentiment_analysis,
                            "response_time": response_time,
                            "timestamp": now_spanish_iso(),
                        }

                        # Comunicaci√≥n HTTP pendiente de implementar
                        # enterprise_analysis = self._process_enterprise_interaction_http(_learning_data)

                        # A√±adir m√©tricas b√°sicas por ahora
                        interaction_data["enterprise_learning"] = {
                            "processed": True,
                            "method": "http_pending",
                            "sentiment_via_http": sentiment_analysis.get(
                                "enterprise_analysis", False
                            ),
                        }

                        logging.info(
                            "‚úÖ Procesamiento empresarial AI Learning completado"
                        )

                    except Exception as e:
                        logging.warning(
                            f"‚ö†Ô∏è Error en procesamiento empresarial AI Learning: {str(e)}"
                        )
                        # Continuar sin fallar

            # üìä SERIALIZACI√ìN DE HISTORIAL
            serializable_history = self._serialize_chat_history(chat_session.history)

            return {
                "response_text": final_natural_response,  # üîó Respuesta natural con enlaces inteligentes
                "chat_history": serializable_history,
                "enterprise_metrics": {
                    "context_used": user_context is not None,
                    "ai_learning_applied": bool(
                        user_context and user_context.get("ai_learned_patterns")
                    ),
                    "sentiment_score": sentiment_analysis.get("score", 0.0),
                    "enterprise_sentiment_analysis": sentiment_analysis.get(
                        "enterprise_analysis", False
                    ),
                    "response_time": response_time,
                    "personalization_level": self._calculate_personalization_level(
                        user_context
                    ),
                    "expert_bot_consulted": self._should_consult_expert_bot(
                        user_message, user_context
                    ),
                    "quality_score": response_analysis.get("quality_score", 0.0),
                    "links_enhanced": enhanced_response_with_links
                    != response.text,  # üîó Flag de mejora
                    "ai_learning_service_active": True,  # Ahora v√≠a HTTP
                },
                "prompt_used": enhanced_message,
                "interaction_id": interaction_data.get("interaction_id"),
                "learning_updates": interaction_data.get("learning_updates", []),
            }

        except Exception as e:
            # üè¢ LOGGING EMPRESARIAL NIVEL PRODUCCI√ìN - Problema #6 RESUELTO
            try:
                # Obtener request_id para trazabilidad empresarial
                from flask import g, has_request_context

                request_id = "NO-REQ-ID"
                if has_request_context() and hasattr(g, "request_id"):
                    request_id = g.request_id
                elif has_request_context() and hasattr(g, "user") and g.user:
                    request_id = f"user-{g.user.get('uid', 'unknown')}"

                # Log empresarial completo con stack trace
                logging.error(
                    f"‚ùå [ENTERPRISE-ERROR] Error procesando mensaje en generative_chat_service "
                    f"[req:{request_id}] [service:energy-ia-api] [component:GenerativeChatService]: {str(e)}",
                    exc_info=True,
                    extra={
                        "service": "energy-ia-api",
                        "component": "GenerativeChatService",
                        "method": "send_message_with_context",
                        "request_id": request_id,
                        "error_type": type(e).__name__,
                        "severity": "HIGH",
                    },
                )
            except Exception as log_error:
                # Fallback en caso de que el logging falle
                logging.error(
                    f"‚ùå Error procesando mensaje: {str(e)} [LOGGING-FALLBACK: {str(log_error)}]"
                )

            return {
                "response_text": "¬°Hola! Soy tu asistente experto en energ√≠a. ¬øEn qu√© puedo ayudarte hoy?",
                "chat_history": [],
                "enterprise_metrics": {
                    "error": True,
                    "error_message": str(e),
                    "fallback_response": True,
                },
            }

    def _analyze_message_sentiment(self, message: str) -> Dict[str, Any]:
        """Analiza sentiment del mensaje del usuario v√≠a HTTP con expert_bot_api"""
        try:
            # üîó COMUNICACI√ìN HTTP CON EXPERT_BOT_API (ARQUITECTURA CORRECTA)
            expert_bot_url = current_app.config.get("EXPERT_BOT_API_URL")
            if expert_bot_url:
                try:
                    # Generar IDs temporales para el an√°lisis
                    temp_user_id = "temp_analysis_user"
                    temp_conversation_id = str(uuid.uuid4())

                    # Llamada HTTP al endpoint de sentiment analysis interno
                    response = requests.post(
                        f"{expert_bot_url}/api/v1/analysis/sentiment/internal",
                        json={
                            "message_text": message,
                            "user_id": temp_user_id,
                            "conversation_id": temp_conversation_id,
                        },
                        headers={
                            "Content-Type": "application/json",
                            "Authorization": f"Bearer {current_app.config.get('INTERNAL_SERVICE_TOKEN', '')}",
                        },
                        timeout=5,
                    )

                    if response.status_code == 200:
                        sentiment_data = response.json()
                        sentiment_analysis = sentiment_data.get(
                            "sentiment_analysis", {}
                        )

                        return {
                            "score": sentiment_analysis.get("sentiment_score", 0.0),
                            "confidence": sentiment_analysis.get("confidence", 0.5),
                            "sentiment_label": sentiment_analysis.get(
                                "sentiment_label", "neutral"
                            ),
                            "emotional_indicators": sentiment_analysis.get(
                                "emotional_indicators", {}
                            ),
                            "personalization_hints": sentiment_analysis.get(
                                "personalization_hints", []
                            ),
                            "risk_factors": sentiment_analysis.get("risk_factors", []),
                            "engagement_level": sentiment_analysis.get(
                                "engagement_level", "medium"
                            ),
                            "enterprise_analysis": True,
                            "timestamp": now_spanish_iso(),
                        }
                    else:
                        logging.warning(
                            f"‚ö†Ô∏è Expert Bot API devolvi√≥ c√≥digo {response.status_code}, usando an√°lisis b√°sico"
                        )

                except (requests.RequestException, requests.Timeout) as e:
                    logging.warning(
                        f"‚ö†Ô∏è Error conectando con Expert Bot API para sentiment: {str(e)}, usando an√°lisis b√°sico"
                    )
            else:
                logging.warning(
                    "‚ö†Ô∏è EXPERT_BOT_API_URL no configurada, usando an√°lisis b√°sico"
                )

            # üîÑ AN√ÅLISIS B√ÅSICO DE FALLBACK
            positive_keywords = [
                "gracias",
                "excelente",
                "perfecto",
                "genial",
                "bien",
                "bueno",
            ]
            negative_keywords = [
                "problema",
                "error",
                "mal",
                "malo",
                "frustrado",
                "dif√≠cil",
            ]

            message_lower = message.lower()
            positive_count = sum(
                1 for word in positive_keywords if word in message_lower
            )
            negative_count = sum(
                1 for word in negative_keywords if word in message_lower
            )

            # C√°lculo de score b√°sico
            score = 0.0
            if positive_count > negative_count:
                score = min(1.0, positive_count * 0.3)
            elif negative_count > positive_count:
                score = max(-1.0, negative_count * -0.3)

            return {
                "score": score,
                "confidence": abs(score),
                "positive_indicators": positive_count,
                "negative_indicators": negative_count,
                "message_length": len(message),
                "enterprise_analysis": False,
                "timestamp": now_spanish_iso(),
            }

        except Exception as e:
            logging.error(f"‚ùå Error analizando sentiment: {str(e)}")
            return {"score": 0.0, "confidence": 0.0, "error": str(e)}

    def _build_enhanced_message(
        self,
        user_message: str,
        user_context: Optional[Dict[str, Any]],
        sentiment_analysis: Dict[str, Any],
    ) -> str:
        """Construye mensaje enriquecido con contexto empresarial"""
        try:
            context_parts = ["=== üè¢ CONTEXTO EMPRESARIAL SMARWATT ==="]

            # üß† DATOS DEL USUARIO
            if user_context:
                context_parts.append(self._build_user_context_prompt(user_context))

            # üß† AN√ÅLISIS DE SENTIMENT CON AI LEARNING SERVICE
            if sentiment_analysis.get("score") != 0:
                context_parts.append(f"\nüß† AN√ÅLISIS DE SENTIMENT:")
                context_parts.append(
                    f"- Score emocional: {sentiment_analysis['score']:.2f}"
                )
                context_parts.append(
                    f"- Confianza: {sentiment_analysis['confidence']:.2f}"
                )

                # üî• INFORMACI√ìN AVANZADA SI EST√Å DISPONIBLE
                if sentiment_analysis.get("enterprise_analysis"):
                    context_parts.append("- An√°lisis: AI Learning Service (Avanzado)")

                    if sentiment_analysis.get("engagement_level"):
                        context_parts.append(
                            f"- Nivel engagement: {sentiment_analysis['engagement_level']}"
                        )

                    if sentiment_analysis.get("risk_factors"):
                        risk_count = len(sentiment_analysis["risk_factors"])
                        if risk_count > 0:
                            context_parts.append(
                                f"‚ö†Ô∏è Factores de riesgo detectados: {risk_count}"
                            )

                    if sentiment_analysis.get("personalization_hints"):
                        hints_count = len(sentiment_analysis["personalization_hints"])
                        if hints_count > 0:
                            context_parts.append(
                                f"üí° Hints personalizaci√≥n: {hints_count}"
                            )
                else:
                    context_parts.append("- An√°lisis: B√°sico (fallback)")

                if sentiment_analysis["score"] < -0.2:
                    context_parts.append(
                        "‚ö†Ô∏è USUARIO CON SENTIMENT NEGATIVO - Usar tono emp√°tico y soluciones espec√≠ficas"
                    )
                elif sentiment_analysis["score"] > 0.2:
                    context_parts.append(
                        "üòä USUARIO CON SENTIMENT POSITIVO - Mantener energ√≠a y ofrecer valor adicional"
                    )

            # üß† INSTRUCCIONES INTELIGENTES SEG√öN TIPO DE CONVERSACI√ìN
            conversation_type = self._detect_conversation_type(
                user_message, user_context
            )
            data_completeness = (
                self._calculate_data_completeness(user_context) if user_context else 0
            )
            user_name = user_context.get("user_name") if user_context else None

            # Aplicar instrucciones CONTEXTUALES seg√∫n la conversaci√≥n
            if conversation_type == "greeting":
                # SALUDOS - Conversaci√≥n natural y amigable
                context_parts.append("\n=== ü§ù INSTRUCCIONES PARA SALUDO NATURAL ===")
                time_greeting = self._get_time_based_greeting()
                if user_name:
                    context_parts.append(
                        f"1. SALUDA CALUROSAMENTE: '¬°{time_greeting} {user_name}!'"
                    )
                else:
                    context_parts.append(
                        f"1. SALUDA CALUROSAMENTE: '¬°{time_greeting}!'"
                    )
                context_parts.append(
                    "2. PREGUNTA amigablemente: '¬øEn qu√© puedo ayudarte con la energ√≠a?'"
                )
                context_parts.append("3. MANT√âN tono conversacional y cercano")
                context_parts.append(
                    "4. NO menciones datos espec√≠ficos a menos que pregunten"
                )

            elif conversation_type == "personal_analysis" and data_completeness >= 50:
                # AN√ÅLISIS PERSONAL - Usar todos los datos disponibles
                context_parts.append(
                    "\n=== üéØ INSTRUCCIONES AN√ÅLISIS PERSONALIZADO ==="
                )
                context_parts.append(f"1. SALUDA por nombre: {user_name}")
                context_parts.append(
                    "2. USA espec√≠ficamente su comercializadora, coste mensual y tarifa"
                )
                context_parts.append("3. APLICA sus cifras exactas de factura")
                context_parts.append("4. CALCULA ahorros con SUS datos reales")

            elif conversation_type == "general_energy":
                # TEMAS GENERALES - Expertise sin bombardeo personal
                context_parts.append("\n=== üåü INSTRUCCIONES TEMA GENERAL ENERG√çA ===")
                if user_name:
                    context_parts.append(f"1. SALUDA brevemente: 'Hola {user_name}'")
                context_parts.append("2. RESPONDE como experto en energ√≠a")
                context_parts.append("3. INCLUYE consejos pr√°cticos y √∫tiles")
                context_parts.append(
                    "4. SI es relevante, menciona sutilmente sus datos"
                )
                context_parts.append("5. INVITA a seguir charlando sobre el tema")

            elif conversation_type == "casual_chat":
                # CHARLA CASUAL - Conversacional con expertise disponible
                context_parts.append("\n=== üí¨ INSTRUCCIONES CONVERSACI√ìN CASUAL ===")
                if user_name:
                    context_parts.append(f"1. SALUDA naturalmente: {user_name}")
                context_parts.append("2. RESPONDE de forma conversacional y amigable")
                context_parts.append(
                    "3. MUESTRA expertise energ√©tico cuando sea natural"
                )
                context_parts.append("4. INVITA a profundizar en temas de inter√©s")

            elif data_completeness < 20 and user_name:
                # USUARIO NUEVO - Tratamiento VIP conversacional
                context_parts.append("\n=== ü•á INSTRUCCIONES USUARIO VIP (NUEVO) ===")
                context_parts.append(f"1. SALUDA con entusiasmo: 'Hola {user_name}!'")
                context_parts.append(
                    "2. CONVERSACI√ìN natural sobre energ√≠a SIN pedir datos"
                )
                context_parts.append("3. RESPONDE expertamente pero sin presionar")
                context_parts.append(
                    "4. SOLO si pregunta por an√°lisis personal, menciona SUTILMENTE valor de m√°s datos"
                )
                context_parts.append(
                    "5. ENF√ìCATE en crear buena experiencia y confianza"
                )

            else:
                # FALLBACK - Instrucciones balanceadas
                context_parts.append(
                    "\n=== ‚öñÔ∏è INSTRUCCIONES CONVERSACI√ìN BALANCEADA ==="
                )
                if user_name:
                    context_parts.append(f"1. SALUDA por nombre: {user_name}")
                context_parts.append(
                    "2. ADAPTA nivel de personalizaci√≥n seg√∫n pregunta"
                )
                context_parts.append("3. MANT√âN conversaci√≥n natural y fluida")
                context_parts.append("4. USA datos cuando aporten valor real")

            # INSTRUCCIONES UNIVERSALES para todas las conversaciones
            context_parts.append("\n=== üåç INSTRUCCIONES UNIVERSALES ===")
            context_parts.append("‚Ä¢ NUNCA pidas datos que ya tienes")
            context_parts.append("‚Ä¢ ADAPTA tono seg√∫n an√°lisis de sentiment")
            context_parts.append("‚Ä¢ MANT√âN conversaci√≥n natural y atractiva")
            context_parts.append("‚Ä¢ INVITA a seguir conversando sobre energ√≠a")
            context_parts.append("‚Ä¢ ERES experto pero conversacional, no robotizado")

            context_parts.append(f"\nüìù PREGUNTA DEL USUARIO: {user_message}")

            return "\n".join(context_parts)

        except Exception as e:
            logging.error(f"‚ùå Error construyendo mensaje enriquecido: {str(e)}")
            return user_message

    def _build_user_context_prompt(self, user_context: Dict[str, Any]) -> str:
        """
        üè¢ CONSTRUYE PROMPT EMPRESARIAL CON TODOS LOS DATOS DISPONIBLES

        Usa TODOS los datos disponibles para personalizaci√≥n m√°xima:
        - Datos personales y de factura completos
        - Datos de consumo por franjas horarias
        - Informaci√≥n de comercializadora y distribuidora
        - Datos del hogar y ubicaci√≥n
        - Patrones de aprendizaje autom√°tico

        DISE√ëO ROBUSTO: Funciona con datos completos, parciales o m√≠nimos
        """
        context_parts = []

        # ‚úÖ DATOS PERSONALES PRIORITARIOS
        if user_context.get("user_name"):
            context_parts.append(f"üë§ USUARIO: {user_context['user_name']}")

        # ‚úÖ DATOS DE FACTURA COMPLETOS (TODOS LOS 20+ CAMPOS)
        if user_context.get("last_invoice"):
            invoice = user_context["last_invoice"]
            context_parts.append("üìã DATOS COMPLETOS DE FACTURA:")

            # Datos cr√≠ticos b√°sicos
            if invoice.get("kwh_consumidos"):
                context_parts.append(
                    f"- Consumo total: {invoice['kwh_consumidos']} kWh/mes"
                )
            if invoice.get("coste_total"):
                context_parts.append(f"- Coste mensual: {invoice['coste_total']}‚Ç¨")

            # ‚úÖ COMERCIALIZADORA Y TARIFA (ANTES IGNORADOS)
            if invoice.get("comercializadora"):
                context_parts.append(
                    f"- Comercializadora actual: {invoice['comercializadora']}"
                )
            if invoice.get("tariff_name_from_invoice"):
                context_parts.append(
                    f"- Tarifa contratada: {invoice['tariff_name_from_invoice']}"
                )
            if invoice.get("tariff_type"):
                context_parts.append(f"- Tipo de tarifa: {invoice['tariff_type']}")

            # ‚úÖ CONSUMO POR FRANJAS HORARIAS (ANTES IGNORADOS)
            if (
                invoice.get("kwh_punta")
                or invoice.get("kwh_valle")
                or invoice.get("kwh_llano")
            ):
                context_parts.append("- Desglose horario:")
                if invoice.get("kwh_punta"):
                    context_parts.append(f"  ¬∑ Punta: {invoice['kwh_punta']} kWh")
                if invoice.get("kwh_valle"):
                    context_parts.append(f"  ¬∑ Valle: {invoice['kwh_valle']} kWh")
                if invoice.get("kwh_llano"):
                    context_parts.append(f"  ¬∑ Llano: {invoice['kwh_llano']} kWh")

            # ‚úÖ PRECIOS Y T√âRMINOS (ANTES IGNORADOS)
            if invoice.get("precio_kwh_punta"):
                context_parts.append(
                    f"- Precio punta: {invoice['precio_kwh_punta']:.4f}‚Ç¨/kWh"
                )
            if invoice.get("termino_energia"):
                context_parts.append(
                    f"- T√©rmino energ√≠a: {invoice['termino_energia']}‚Ç¨"
                )
            if invoice.get("termino_potencia"):
                context_parts.append(
                    f"- T√©rmino potencia: {invoice['termino_potencia']}‚Ç¨"
                )

            # ‚úÖ POTENCIA Y DATOS T√âCNICOS (ANTES IGNORADOS)
            if invoice.get("potencia_contratada_kw"):
                context_parts.append(
                    f"- Potencia contratada: {invoice['potencia_contratada_kw']} kW"
                )
            if invoice.get("potencia_maxima_demandada"):
                context_parts.append(
                    f"- Potencia m√°xima demandada: {invoice['potencia_maxima_demandada']} kW"
                )

            # ‚úÖ DISTRIBUIDORA Y UBICACI√ìN (ANTES IGNORADOS)
            if invoice.get("distribuidora"):
                context_parts.append(f"- Distribuidora: {invoice['distribuidora']}")
            if invoice.get("codigo_postal"):
                context_parts.append(f"- C√≥digo postal: {invoice['codigo_postal']}")

            # ‚úÖ DATOS TEMPORALES Y FACTURACI√ìN (ANTES IGNORADOS)
            if invoice.get("periodo_facturacion_dias"):
                context_parts.append(
                    f"- Per√≠odo facturaci√≥n: {invoice['periodo_facturacion_dias']} d√≠as"
                )
            if invoice.get("fecha_emision"):
                context_parts.append(f"- Fecha emisi√≥n: {invoice['fecha_emision']}")

            # ‚úÖ CALCULAR PORCENTAJES AUTOM√ÅTICAMENTE
            if invoice.get("peak_percent_from_invoice"):
                context_parts.append(
                    f"- Consumo en horas punta: {invoice['peak_percent_from_invoice']}%"
                )
            elif invoice.get("kwh_punta") and invoice.get("kwh_consumidos"):
                peak_percent = round(
                    (invoice["kwh_punta"] / invoice["kwh_consumidos"]) * 100, 1
                )
                context_parts.append(f"- Consumo en horas punta: {peak_percent}%")

        # ‚úÖ DATOS DEL HOGAR Y PERFIL (ANTES IGNORADOS PARCIALMENTE)
        household_info = []
        if user_context.get("home_type"):
            household_info.append(f"Tipo: {user_context['home_type']}")
        if user_context.get("num_inhabitants"):
            household_info.append(f"Habitantes: {user_context['num_inhabitants']}")
        if user_context.get("heating_type"):
            household_info.append(f"Calefacci√≥n: {user_context['heating_type']}")
        if user_context.get("has_ac"):
            household_info.append("Aire acondicionado: S√≠")
        if user_context.get("has_pool"):
            household_info.append("Piscina: S√≠")
        if user_context.get("is_teleworker"):
            household_info.append("Teletrabajo: S√≠")
        if user_context.get("has_solar_panels"):
            household_info.append("Paneles solares: S√≠")
        if user_context.get("post_code_prefix"):
            household_info.append(f"CP: {user_context['post_code_prefix']}")

        if household_info:
            context_parts.append(f"üè† PERFIL DEL HOGAR: {' | '.join(household_info)}")

        # ‚úÖ APRENDIZAJE AUTOM√ÅTICO Y PATRONES (MANTENIDO Y MEJORADO)
        if user_context.get("ai_learned_patterns"):
            patterns = user_context["ai_learned_patterns"]
            context_parts.append("üß† PATRONES APRENDIDOS:")

            if "communication_style" in patterns:
                style = patterns["communication_style"]["data"]
                context_parts.append(
                    f"- Estilo comunicaci√≥n: {style.get('formality_level', 'normal')}"
                )
                if style.get("message_length_preference"):
                    context_parts.append(
                        f"- Prefiere respuestas: {style['message_length_preference']}"
                    )

            if "interest_topics" in patterns:
                topics = patterns["interest_topics"]["data"]
                top_topics = [k for k, v in topics.items() if v > 0]
                if top_topics:
                    context_parts.append(
                        f"- Temas de inter√©s: {', '.join(top_topics[:3])}"
                    )

            if "satisfaction_history" in patterns:
                satisfaction_data = patterns["satisfaction_history"]["data"]
                if satisfaction_data:
                    avg_satisfaction = sum(
                        item.get("sentiment_score", 0)
                        for item in satisfaction_data[-3:]
                    ) / min(3, len(satisfaction_data))
                    if avg_satisfaction > 0.3:
                        context_parts.append("- Historial: Generalmente satisfecho")
                    elif avg_satisfaction < -0.3:
                        context_parts.append(
                            "- Historial: Ha tenido frustraciones previas"
                        )

        # ‚úÖ RESUMEN DE COMPLETITUD DE DATOS
        data_completeness = self._calculate_data_completeness(user_context)
        if data_completeness >= 90:
            context_parts.append(
                "üìä DATOS: Perfil completo (90%+) - M√°xima personalizaci√≥n disponible"
            )
        elif data_completeness >= 70:
            context_parts.append(
                "üìä DATOS: Perfil detallado (70%+) - Alta personalizaci√≥n"
            )
        elif data_completeness >= 50:
            context_parts.append(
                "üìä DATOS: Perfil b√°sico (50%+) - Personalizaci√≥n media"
            )
        else:
            context_parts.append(
                "üìä DATOS: Perfil m√≠nimo (<50%) - Personalizaci√≥n b√°sica"
            )

        return "\n".join(context_parts)

    def _calculate_data_completeness(self, user_context: Dict[str, Any]) -> float:
        """Calcula el porcentaje de completitud de datos del usuario (0-100)"""
        score = 0
        total_possible = 100

        # Datos b√°sicos (30 puntos)
        if user_context.get("user_name"):
            score += 10
        if user_context.get("last_invoice", {}).get("kwh_consumidos"):
            score += 10
        if user_context.get("last_invoice", {}).get("coste_total"):
            score += 10

        # Datos de factura avanzados (40 puntos)
        invoice = user_context.get("last_invoice", {})
        if invoice.get("comercializadora"):
            score += 8
        if invoice.get("kwh_punta") or invoice.get("kwh_valle"):
            score += 8
        if invoice.get("potencia_contratada_kw"):
            score += 8
        if invoice.get("distribuidora"):
            score += 8
        if invoice.get("tariff_name_from_invoice"):
            score += 8

        # Datos del hogar (20 puntos)
        if user_context.get("home_type"):
            score += 5
        if user_context.get("num_inhabitants"):
            score += 5
        if user_context.get("post_code_prefix"):
            score += 5
        if any(
            [
                user_context.get("has_ac"),
                user_context.get("has_pool"),
                user_context.get("heating_type"),
            ]
        ):
            score += 5

        # Aprendizaje autom√°tico (10 puntos)
        if user_context.get("ai_learned_patterns"):
            score += 10

        return min(100, score)

    def _detect_conversation_type(
        self, user_message: str, user_context: Optional[Dict[str, Any]]
    ) -> str:
        """
        üß† DETECTA TIPO DE CONVERSACI√ìN PARA RESPUESTA NATURAL
        Permite chatbot conversacional que adapta su expertise seg√∫n contexto
        """
        message_lower = user_message.lower().strip()

        # 1. SALUDOS SIMPLES - Conversaci√≥n social amigable
        greeting_patterns = [
            "hola",
            "buenos d√≠as",
            "buenas tardes",
            "buenas noches",
            "hey",
            "qu√© tal",
            "que tal",
            "c√≥mo est√°s",
            "como estas",
            "saludos",
            "buenas",
            "buen d√≠a",
            "buen dia",
        ]

        if (
            any(pattern in message_lower for pattern in greeting_patterns)
            and len(message_lower) < 30
        ):
            return "greeting"

        # 2. PREGUNTAS ESPEC√çFICAS DE DATOS - Usar personalizaci√≥n m√°xima
        specific_data_patterns = [
            "mi factura",
            "mi consumo",
            "mi tarifa",
            "mi comercializadora",
            "cu√°nto gasto",
            "cuanto gasto",
            "mis datos",
            "mi situaci√≥n",
            "qu√© ahorro",
            "que ahorro",
            "cu√°nto pago",
            "cuanto pago",
        ]

        if any(pattern in message_lower for pattern in specific_data_patterns):
            return "personal_analysis"

        # 3. TEMAS GENERALES DE ENERG√çA - Expertise sin bombardeo
        general_energy_topics = [
            "placas solares",
            "paneles solares",
            "energ√≠a renovable",
            "energia renovable",
            "eficiencia energ√©tica",
            "eficiencia energetica",
            "consejos",
            "tips",
            "c√≥mo ahorrar",
            "como ahorrar",
            "qu√© es",
            "que es",
        ]

        if any(topic in message_lower for topic in general_energy_topics):
            return "general_energy"

        # 4. PREGUNTAS DE PRECIOS - Market data espec√≠fica
        price_keywords = ["precio", "coste", "cuesta", "cu√°nto est√°", "cuanto esta"]
        if any(keyword in message_lower for keyword in price_keywords):
            return "price_inquiry"

        # 5. RECOMENDACIONES - Expert bot consultation
        recommendation_keywords = [
            "recomienda",
            "recomendaci√≥n",
            "mejor tarifa",
            "cambiar",
        ]
        if any(keyword in message_lower for keyword in recommendation_keywords):
            return "recommendation_request"

        # 6. DEFAULT - Conversaci√≥n casual con expertise disponible
        return "casual_chat"

    def _get_time_based_greeting(self) -> str:
        """
        üïê GENERA SALUDO SEG√öN HORA ESPA√ëOLA
        Respeta zona horaria del usuario espa√±ol para naturalidad
        """
        try:
            from datetime import datetime
            import pytz

            # Zona horaria espa√±ola
            madrid_tz = pytz.timezone("Europe/Madrid")
            current_time = datetime.now(madrid_tz)
            hour = current_time.hour

            if 5 <= hour < 12:
                return "Buenos d√≠as"
            elif 12 <= hour < 20:
                return "Buenas tardes"
            else:
                return "Buenas noches"
        except:
            # Fallback robusto
            return "Hola"

    def _should_consult_expert_bot(
        self, user_message: str, user_context: Optional[Dict[str, Any]]
    ) -> bool:
        """Determina si debe consultar endpoint de recomendaciones de tarifas"""
        # Palabras clave espec√≠ficas para recomendaciones de tarifas
        tariff_keywords = [
            "tarifa",
            "tarifas",
            "recomienda",
            "recomiendame",
            "recomendaci√≥n",
            "recomendaciones",
            "mejor tarifa",
            "qu√© tarifa",
            "qu√© tarifas",
            "que tarifas",
            "tarifas hay",
            "qu√© tarifas hay",
            "que tarifas hay",
            "cu√°les tarifas",
            "cuales tarifas",
            "dime tarifas",
            "cambiar tarifa",
            "ahorro",
            "ahorrar",
            "precio",
            "coste",
            "factura",
            "comparar",
            "alternativas",
            "conviene",
            "interesa",
            "beneficia",
        ]

        message_lower = user_message.lower()
        has_tariff_keywords = any(
            keyword in message_lower for keyword in tariff_keywords
        )

        # Tambi√©n consultar si tiene datos completos del usuario y pregunta sobre energ√≠a
        has_complete_data = (
            user_context
            and user_context.get("last_invoice")
            and user_context.get("last_invoice", {}).get("kwh_consumidos")
        )

        energy_keywords = [
            "consumo",
            "kwh",
            "factura",
            "luz",
            "electricidad",
            "energ√≠a",
        ]
        has_energy_keywords = any(
            keyword in message_lower for keyword in energy_keywords
        )

        # Consultar si pregunta sobre tarifas O si tiene datos completos y pregunta sobre energ√≠a
        should_consult = bool(
            has_tariff_keywords or (has_complete_data and has_energy_keywords)
        )

        if should_consult:
            logging.info(
                f"üéØ Consultando recomendaciones de tarifas para: '{user_message[:50]}...'"
            )

        return should_consult

    def _should_consult_market_prices(
        self, user_message: str, user_context: Optional[Dict[str, Any]]
    ) -> bool:
        """
        üè¢ DETECTA PREGUNTAS ESPEC√çFICAS DE PRECIOS (NO RECOMENDACIONES)
        L√≥gica empresarial robusta para distinguir consultas de precios puros
        """
        message_lower = user_message.lower()

        # Palabras clave ESPEC√çFICAS para preguntas de PRECIO (no recomendaciones)
        price_specific_keywords = [
            "precio de la luz",
            "precio actual",
            "precio energ√≠a",
            "precio electricidad",
            "cu√°nto cuesta el kwh",
            "cuanto cuesta el kwh",
            "precio kwh",
            "precio del kwh",
            "precio por kwh",
            "coste kwh",
            "coste del kwh",
            "a cu√°nto est√°",
            "a cuanto esta",
            "precio hoy",
            "precio ahora",
            "cu√°l es el precio",
            "cual es el precio",
            "dime el precio",
            "precio mercado",
            "precio mercado energ√©tico",
            "pvpc hoy",
            "pvpc actual",
            "tarifa pvpc",
            "precio pvpc",
        ]

        # Detectar preguntas directas de precio
        has_price_query = any(
            keyword in message_lower for keyword in price_specific_keywords
        )

        # Patrones de pregunta espec√≠ficos de precio
        price_patterns = [
            "cu√°nto cuesta",
            "cuanto cuesta",
            "a cu√°nto est√°",
            "a cuanto esta",
            "qu√© precio",
            "que precio",
            "dime el precio",
            "precio de",
        ]

        has_price_pattern = any(pattern in message_lower for pattern in price_patterns)

        # EXCLUIR si claramente pide recomendaciones
        excludes_recommendations = not any(
            exclude in message_lower
            for exclude in [
                "recomienda",
                "recomendacion",
                "mejor tarifa",
                "que tarifa",
                "cambiar tarifa",
                "comparar tarifas",
            ]
        )

        should_consult_prices = bool(
            (has_price_query or has_price_pattern) and excludes_recommendations
        )

        if should_consult_prices:
            logging.info(
                f"üí∞ Consultando PRECIOS de mercado para: '{user_message[:50]}...'"
            )

        return should_consult_prices

    def _consult_expert_bot(
        self, user_message: str, user_context: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """Consulta endpoint de recomendaciones de tarifas empresarial"""
        try:
            from flask import g

            # Verificar si tenemos token de autorizaci√≥n
            if not hasattr(g, "token") or not g.token:
                logging.warning(
                    "‚ö†Ô∏è No hay token disponible para consultar recomendaciones"
                )
                return {}

            # URL del endpoint de recomendaciones empresarial - PRODUCCI√ìN
            # CORRECCI√ìN ARQUITECTURAL: usar endpoint interno propio, no external call
            energy_ia_url = current_app.config.get("ENERGY_IA_API_URL")
            if not energy_ia_url:
                # Fallback robusto para producci√≥n usando URL del servicio actual
                energy_ia_url = request.url_root.rstrip("/")
                logging.warning(
                    "‚ö†Ô∏è ENERGY_IA_API_URL no configurada - usando URL actual"
                )

            recommendations_url = (
                f"{energy_ia_url}/api/v1/energy/tariffs/recommendations"
            )

            headers = {
                "Authorization": f"Bearer {g.token}",
                "Content-Type": "application/json",
            }

            response = requests.get(recommendations_url, headers=headers, timeout=15)

            if response.status_code == 200:
                result: Dict[str, Any] = response.json()
                logging.info("‚úÖ Recomendaciones de tarifas obtenidas exitosamente")
                return result.get("data", {})
            else:
                logging.warning(
                    f"‚ö†Ô∏è Endpoint recomendaciones respuesta: {response.status_code}"
                )
                return {}

        except Exception as e:
            logging.error(f"‚ùå Error consultando recomendaciones de tarifas: {str(e)}")
            return {}

    def _get_current_market_prices(self) -> Dict[str, Any]:
        """
        üè¢ CONSULTA ESPEC√çFICA DE PRECIOS DE MERCADO (NO RECOMENDACIONES)
        Acceso directo al endpoint market-data para obtener precios actuales
        """
        try:
            from flask import g

            # Verificar token de autorizaci√≥n
            if not hasattr(g, "token") or not g.token:
                logging.warning("‚ö†Ô∏è No hay token disponible para consultar precios")
                return {}

            # URL del endpoint ESPEC√çFICO de market-data
            energy_ia_url = current_app.config.get("ENERGY_IA_API_URL")
            if not energy_ia_url:
                energy_ia_url = request.url_root.rstrip("/")
                logging.warning(
                    "‚ö†Ô∏è ENERGY_IA_API_URL no configurada - usando URL actual"
                )

            market_data_url = f"{energy_ia_url}/api/v1/energy/tariffs/market-data"

            headers = {
                "Authorization": f"Bearer {g.token}",
                "Content-Type": "application/json",
            }

            response = requests.get(market_data_url, headers=headers, timeout=15)

            if response.status_code == 200:
                result: Dict[str, Any] = response.json()
                logging.info("‚úÖ Datos de precios de mercado obtenidos exitosamente")
                return result.get("data", {})
            else:
                logging.warning(
                    f"‚ö†Ô∏è Endpoint market-data respuesta: {response.status_code}"
                )
                return {}

        except Exception as e:
            logging.error(f"‚ùå Error consultando precios de mercado: {str(e)}")
            return {}

    def _format_market_prices_for_chat(self, market_data: Dict[str, Any]) -> str:
        """
        üè¢ FORMATEA DATOS DE PRECIOS PARA RESPUESTA NATURAL DEL CHAT
        Convierte datos t√©cnicos en informaci√≥n √∫til para el usuario
        """
        if not market_data:
            return ""

        try:
            tariffs = market_data.get("tariffs", [])
            stats = market_data.get("market_statistics", {})

            if not tariffs:
                return ""

            # Filtrar tarifas PVPC
            pvpc_tariffs = [t for t in tariffs if t.get("is_pvpc", False)]

            # Calcular precios promedio del mercado
            peak_prices = [
                float(t["kwh_price_peak"]) for t in tariffs if t.get("kwh_price_peak")
            ]
            valley_prices = [
                float(t["kwh_price_valley"])
                for t in tariffs
                if t.get("kwh_price_valley")
            ]
            flat_prices = [
                float(t["kwh_price_flat"]) for t in tariffs if t.get("kwh_price_flat")
            ]

            formatted_info = []

            # Informaci√≥n PVPC (m√°s relevante para usuarios)
            if pvpc_tariffs:
                pvpc = pvpc_tariffs[0]  # Primer PVPC disponible
                if pvpc.get("kwh_price_peak") and pvpc.get("kwh_price_valley"):
                    formatted_info.append(
                        f"üí° PRECIO ACTUAL PVPC: {float(pvpc['kwh_price_peak']):.3f} ‚Ç¨/kWh (punta) "
                        f"y {float(pvpc['kwh_price_valley']):.3f} ‚Ç¨/kWh (valle)"
                    )
                elif pvpc.get("kwh_price_flat"):
                    formatted_info.append(
                        f"üí° PRECIO ACTUAL PVPC: {float(pvpc['kwh_price_flat']):.3f} ‚Ç¨/kWh"
                    )

            # Estad√≠sticas de mercado
            if stats:
                total_tariffs = stats.get("total_tariffs", 0)
                providers = stats.get("providers", 0)
                last_updated = stats.get("last_updated", "")

                if total_tariffs and providers:
                    formatted_info.append(
                        f"üìä MERCADO: {total_tariffs} tarifas activas de {providers} comercializadoras"
                    )

                if last_updated:
                    try:
                        from datetime import datetime

                        update_dt = datetime.fromisoformat(
                            last_updated.replace("Z", "+00:00")
                        )
                        formatted_info.append(
                            f"üïí Actualizado: {update_dt.strftime('%d/%m/%Y %H:%M')}"
                        )
                    except:
                        pass

            # Rangos de precios del mercado
            if peak_prices:
                min_peak = min(peak_prices)
                max_peak = max(peak_prices)
                avg_peak = sum(peak_prices) / len(peak_prices)
                formatted_info.append(
                    f"‚ö° RANGO PUNTA: {min_peak:.3f} - {max_peak:.3f} ‚Ç¨/kWh (promedio: {avg_peak:.3f})"
                )

            if valley_prices:
                min_valley = min(valley_prices)
                max_valley = max(valley_prices)
                avg_valley = sum(valley_prices) / len(valley_prices)
                formatted_info.append(
                    f"üåô RANGO VALLE: {min_valley:.3f} - {max_valley:.3f} ‚Ç¨/kWh (promedio: {avg_valley:.3f})"
                )

            return "\n".join(formatted_info) if formatted_info else ""

        except Exception as e:
            logging.error(f"‚ùå Error formateando precios de mercado: {str(e)}")
            return ""

    def _integrate_expert_response(
        self, enhanced_message: str, expert_response: Dict[str, Any]
    ) -> str:
        """Integra respuesta de recomendaciones de tarifas en el mensaje empresarial"""
        if not expert_response:
            return enhanced_message

        # Integrar recomendaciones de tarifas espec√≠ficas
        if expert_response.get("recommendations"):
            recommendations = expert_response["recommendations"]
            analysis_summary = expert_response.get("analysis_summary", {})

            tariff_recommendations = (
                "\n\n=== üéØ RECOMENDACIONES ESPEC√çFICAS DE TARIFAS ===\n"
            )

            # Agregar resumen del an√°lisis
            if analysis_summary:
                current_cost = analysis_summary.get("current_monthly_cost", 0)
                best_savings = analysis_summary.get("best_potential_savings", 0)
                tariff_recommendations += f"üí∞ Coste actual: {current_cost}‚Ç¨/mes\n"
                tariff_recommendations += (
                    f"üí∏ Mejor ahorro potencial: {best_savings}‚Ç¨/a√±o\n\n"
                )

            # Agregar top 3 recomendaciones
            for i, rec in enumerate(recommendations[:3], 1):
                provider = rec.get("provider_name", "Proveedor")
                tariff = rec.get("tariff_name", "Tarifa")
                monthly_cost = rec.get("cost_analysis", {}).get("monthly_cost", 0)
                savings = rec.get("potential_savings", 0)

                tariff_recommendations += f"{i}. {provider} - {tariff}\n"
                tariff_recommendations += f"   üíµ Coste: {monthly_cost}‚Ç¨/mes\n"
                tariff_recommendations += f"   üí∞ Ahorro: {savings}‚Ç¨/a√±o\n\n"

            tariff_recommendations += "INSTRUCCI√ìN: USA estas recomendaciones EXACTAS con nombres espec√≠ficos y ahorros calculados.\n"
            enhanced_message += tariff_recommendations

        # Mantener compatibilidad con respuestas legacy
        elif expert_response.get("analysis"):
            enhanced_message += (
                f"\n\n=== üéØ AN√ÅLISIS EXPERT_BOT ===\n{expert_response['analysis']}"
            )

        return enhanced_message

    def _analyze_response_quality(
        self, user_message: str, response: str, user_context: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """Analiza calidad de la respuesta generada"""
        try:
            # M√©tricas b√°sicas de calidad
            response_length = len(response)
            question_answered = "?" in user_message and len(response) > 50
            specific_data_used = bool(
                user_context
                and any(
                    str(value) in response
                    for value in [
                        user_context.get("last_invoice", {}).get("kwh_consumidos"),
                        user_context.get("last_invoice", {}).get("coste_total"),
                        user_context.get("user_name"),
                    ]
                    if value
                )
            )

            # C√°lculo de score de calidad
            quality_score = 0.0
            if response_length > 100:
                quality_score += 0.3
            if question_answered:
                quality_score += 0.3
            if specific_data_used:
                quality_score += 0.4

            return {
                "quality_score": min(1.0, quality_score),
                "response_length": response_length,
                "question_answered": question_answered,
                "specific_data_used": specific_data_used,
                "timestamp": now_spanish_iso(),
            }

        except Exception as e:
            logging.error(f"‚ùå Error analizando calidad: {str(e)}")
            return {"quality_score": 0.0, "error": str(e)}

    def _log_enterprise_interaction(
        self,
        user_message: str,
        response: str,
        user_context: Optional[Dict[str, Any]],
        sentiment_analysis: Dict[str, Any],
        response_analysis: Dict[str, Any],
        response_time: float,
    ) -> Dict[str, Any]:
        """Registra interacci√≥n con m√©tricas empresariales"""
        try:
            interaction_id = str(uuid.uuid4())

            interaction_data = {
                "interaction_id": interaction_id,
                "timestamp": now_spanish_iso(),
                "user_message": user_message,
                "response": response,
                "response_time": response_time,
                "sentiment_score": sentiment_analysis.get("score", 0.0),
                "quality_score": response_analysis.get("quality_score", 0.0),
                "context_completeness": len(user_context) if user_context else 0,
                "personalization_level": self._calculate_personalization_level(
                    user_context
                ),
                "user_id": user_context.get("uid") if user_context else None,
                "service": "energy_ia_api_copy",
            }

            # Log a BigQuery si est√° disponible
            if self.bigquery_client:
                self._log_to_bigquery(interaction_data)

            logging.info(f"üìä Interacci√≥n empresarial registrada: {interaction_id}")

            return interaction_data

        except Exception as e:
            logging.error(f"‚ùå Error logging empresarial: {str(e)}")
            return {"interaction_id": "error", "error": str(e)}

    def _log_to_bigquery(self, interaction_data: Dict[str, Any]) -> None:
        """Registra en BigQuery para an√°lisis empresarial - USANDO CAMPOS CORRECTOS DE conversations_log"""
        try:
            if not self.bigquery_client:
                return

            table_ref = self.bigquery_client.dataset(self.bq_dataset_id).table(
                self.interaction_log_table
            )

            # USAR SOLO CAMPOS EXACTOS DE conversations_log - 16 CAMPOS COMPLETOS
            row = {
                "conversation_id": interaction_data.get("interaction_id", ""),
                "message_id": f"{interaction_data.get('interaction_id', '')}_msg",
                "user_id": interaction_data.get("user_id", ""),
                "timestamp_utc": interaction_data["timestamp"],
                "sender": "user",
                "message_text": interaction_data.get("user_message", ""),
                "intent_detected": interaction_data.get("intent", ""),
                "bot_action": "response",
                "sentiment": interaction_data.get("sentiment_score", "neutral"),
                "deleted": False,
                "deleted_at": None,
                "response_text": interaction_data.get("response", ""),
                "context_completeness": interaction_data.get("context_completeness", 0),
                "personalization_level": interaction_data.get(
                    "personalization_level", "none"
                ),
                "response_time_ms": int(
                    interaction_data.get("response_time", 0) * 1000
                ),
                "session_info": json.dumps(
                    {
                        "user_agent": "energy_ia_chatbot",
                        "platform": "web",
                        "version": "2025.1",
                        "api_version": "v1",
                    }
                ),
                "metadata": json.dumps(
                    {
                        "service": "energy_ia_api",
                        "endpoint": "generative_chat",
                        "features_used": interaction_data.get("features_used", []),
                        "personalization_data": interaction_data.get(
                            "personalization_data", {}
                        ),
                    }
                ),
            }

            errors = self.bigquery_client.insert_rows_json(table_ref, [row])
            if errors:
                logging.error(f"‚ùå Error insertando en BigQuery: {errors}")
            else:
                logging.info(
                    f"‚úÖ Interacci√≥n guardada en BigQuery: {interaction_data.get('interaction_id', 'unknown')}"
                )

        except Exception as e:
            logging.error(f"‚ùå Error logging BigQuery: {str(e)}")

    def _update_learning_patterns(
        self, user_context: Dict[str, Any], interaction_data: Dict[str, Any]
    ) -> None:
        """Actualiza patrones de aprendizaje autom√°tico"""
        try:
            if not user_context or not user_context.get("uid"):
                return

            # Actualizar patrones de comunicaci√≥n
            if "ai_learned_patterns" not in user_context:
                user_context["ai_learned_patterns"] = {}

            patterns = user_context["ai_learned_patterns"]

            # Actualizar estilo de comunicaci√≥n
            if "communication_style" not in patterns:
                patterns["communication_style"] = {
                    "data": {},
                    "updated": now_spanish_iso(),
                }

            comm_style = patterns["communication_style"]["data"]

            # Analizar longitud de mensaje preferida
            message_length = len(interaction_data["user_message"])
            if message_length > 200:
                comm_style["message_length_preference"] = "long"
            elif message_length < 50:
                comm_style["message_length_preference"] = "short"
            else:
                comm_style["message_length_preference"] = "medium"

            # Actualizar nivel de satisfacci√≥n
            if "satisfaction_history" not in patterns:
                patterns["satisfaction_history"] = {
                    "data": [],
                    "updated": now_spanish_iso(),
                }

            satisfaction_data = patterns["satisfaction_history"]["data"]
            satisfaction_data.append(
                {
                    "timestamp": interaction_data["timestamp"],
                    "sentiment_score": interaction_data["sentiment_score"],
                    "quality_score": interaction_data["quality_score"],
                }
            )

            # Mantener solo √∫ltimos 10 registros
            if len(satisfaction_data) > 10:
                satisfaction_data = satisfaction_data[-10:]

            patterns["satisfaction_history"]["data"] = satisfaction_data

            logging.info(f"üß† Patrones de aprendizaje actualizados para usuario")

        except Exception as e:
            logging.error(f"‚ùå Error actualizando patrones: {str(e)}")

    def _calculate_personalization_level(
        self, user_context: Optional[Dict[str, Any]]
    ) -> str:
        """Calcula nivel de personalizaci√≥n aplicado"""
        if not user_context:
            return "none"

        score = 0

        if user_context.get("user_name"):
            score += 1
        if user_context.get("last_invoice"):
            score += 2
        if user_context.get("ai_learned_patterns"):
            score += 3
        if user_context.get("home_type"):
            score += 1

        if score >= 6:
            return "maximum"
        elif score >= 4:
            return "high"
        elif score >= 2:
            return "medium"
        elif score >= 1:
            return "low"
        else:
            return "none"

    def _serialize_chat_history(self, history: List[Any]) -> List[Dict[str, Any]]:
        """Serializa historial de chat"""
        try:
            serializable_history = []

            for content in history:
                try:
                    serializable_history.append(
                        {
                            "role": content.role,
                            "parts": [
                                part.text if hasattr(part, "text") else str(part)
                                for part in content.parts
                            ],
                            "timestamp": now_spanish_iso(),
                        }
                    )
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è Error serializando historial: {str(e)}")

            return serializable_history

        except Exception as e:
            logging.error(f"‚ùå Error serializando historial: {str(e)}")
            return []

    def _make_response_natural(self, response_text: str) -> str:
        """
        ‚ú® Hace la respuesta completamente natural eliminando todos los asteriscos
        y aplicando formato HTML para elementos importantes

        Args:
            response_text: Respuesta original que puede contener asteriscos

        Returns:
            str: Respuesta natural sin asteriscos con HTML para elementos importantes
        """
        try:
            if not response_text:
                return response_text

            # Convertir **texto** a <strong>texto</strong> (negrita HTML)
            natural_response = response_text

            # Reemplazar **texto** con <strong>texto</strong>
            import re

            natural_response = re.sub(
                r"\*\*(.*?)\*\*", r"<strong>\1</strong>", natural_response
            )

            # Eliminar cualquier * restante que no sea parte de un patr√≥n **texto**
            natural_response = natural_response.replace("*", "")

            # Limpiar espacios m√∫ltiples que puedan haber quedado
            natural_response = re.sub(r"\s+", " ", natural_response)

            return natural_response.strip()

        except Exception as e:
            logging.error(f"‚ùå Error haciendo respuesta natural: {str(e)}")
            # Si hay error, al menos eliminar asteriscos b√°sicos
            return response_text.replace("**", "").replace("*", "")

    def _add_links_if_user_requests(self, user_message: str, response_text: str) -> str:
        """
        üîó A√±ade enlaces SOLO cuando el usuario los solicita espec√≠ficamente

        Args:
            user_message: Mensaje original del usuario
            response_text: Respuesta generada por el chatbot

        Returns:
            str: Respuesta con enlaces HTML solo si el usuario los solicit√≥
        """
        try:
            if not user_message or not response_text:
                return response_text

            user_message_lower = user_message.lower()

            # Solo a√±adir enlaces si el usuario EXPL√çCITAMENTE los solicita
            user_requests_help = any(
                word in user_message_lower
                for word in [
                    "ayuda",
                    "ay√∫dame",
                    "help",
                    "soporte",
                    "contacto",
                    "contactar",
                ]
            )

            user_requests_articles = any(
                word in user_message_lower
                for word in [
                    "art√≠culo",
                    "art√≠culos",
                    "blog",
                    "leer m√°s",
                    "m√°s informaci√≥n",
                    "informaci√≥n adicional",
                ]
            )

            user_requests_tools = any(
                word in user_message_lower
                for word in [
                    "calculadora",
                    "calcular",
                    "herramienta",
                    "simular",
                    "simulaci√≥n",
                ]
            )

            # Solo aplicar enlaces si hay solicitud espec√≠fica del usuario
            if user_requests_help or user_requests_articles or user_requests_tools:
                return self.links_service.analyze_and_enhance_response(
                    response_text, user_message
                )

            # Si no hay solicitud espec√≠fica, devolver respuesta original
            return response_text

        except Exception as e:
            logging.error(f"‚ùå Error en an√°lisis contextual de enlaces: {str(e)}")
            return response_text

    def get_enterprise_metrics(self) -> Dict[str, Any]:
        """Obtiene m√©tricas empresariales del servicio"""
        try:
            base_metrics = {
                "service_status": "active",
                "model_initialized": self.model is not None,
                "bigquery_connected": self.bigquery_client is not None,
                "auth_system": "active",
                "ai_learning_service_connected": True,  # V√≠a HTTP
                "timestamp": now_spanish_iso(),
                "version": "2025_enterprise",
            }

            # üîó M√âTRICAS V√çA HTTP CON EXPERT_BOT_API
            try:
                # Comunicaci√≥n HTTP pendiente de implementar para m√©tricas avanzadas
                base_metrics["ai_learning_metrics"] = {
                    "method": "http_communication",
                    "status": "ready",
                    "sentiment_analysis": "active_via_http",
                }
                base_metrics["ai_learning_status"] = "active_via_http"
            except Exception as e:
                logging.warning(
                    f"‚ö†Ô∏è Error obteniendo m√©tricas AI Learning v√≠a HTTP: {str(e)}"
                )
                base_metrics["ai_learning_status"] = "http_error"
                base_metrics["ai_learning_error"] = str(e)

            return base_metrics

        except Exception as e:
            logging.error(f"‚ùå Error obteniendo m√©tricas: {str(e)}")
            return {"service_status": "error", "error": str(e)}


# üè¢ FUNCI√ìN FACTORY EMPRESARIAL PARA CHAT SERVICE
# Esta funci√≥n garantiza compatibilidad con toda la aplicaci√≥n

# Instancia singleton para compatibilidad empresarial
_enterprise_chat_service_instance = None


def get_enterprise_chat_service():
    """
    Factory function empresarial para obtener instancia de Chat Service

    Returns:
        EnterpriseGenerativeChatService: Instancia singleton del servicio

    Raises:
        AppError: Si hay problemas de configuraci√≥n o inicializaci√≥n
    """
    global _enterprise_chat_service_instance

    if _enterprise_chat_service_instance is None:
        try:
            _enterprise_chat_service_instance = EnterpriseGenerativeChatService()
            logger.info(
                "üè¢ Factory function: EnterpriseGenerativeChatService inicializado"
            )
        except Exception as e:
            logger.error(f"‚ùå Error en factory function Chat: {str(e)}")
            raise AppError(f"Error inicializando Chat service: {str(e)}", 500)

    return _enterprise_chat_service_instance


logger = logging.getLogger(__name__)
logger.info("‚úÖ M√≥dulo EnterpriseGenerativeChatService cargado correctamente")

# üîÑ ALIAS DE COMPATIBILIDAD EMPRESARIAL
# Mantiene compatibilidad con c√≥digo existente que usa GenerativeChatService
GenerativeChatService = EnterpriseGenerativeChatService

logger.info("‚úÖ Alias de compatibilidad GenerativeChatService creado")
